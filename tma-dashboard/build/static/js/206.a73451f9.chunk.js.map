{"version":3,"file":"static/js/206.a73451f9.chunk.js","mappings":"oMAgEA,IA5DA,SAAqBA,GAEjB,IAAIC,GAAWC,EAAAA,EAAAA,MAEf,GAAoCC,EAAAA,EAAAA,UAChC,CACIC,YAAaJ,EAAMI,YACnBC,WAAW,EACXC,YAAa,KACbC,QAAS,OALjB,eAAOC,EAAP,KAAmBC,EAAnB,KASA,SAASC,EAAkBC,EAAGC,GACI,YAA3BJ,EAAWF,aACVL,EAASO,EAAWJ,aAExBJ,EAAMa,UAAUR,WAAY,EAC5BI,GAAc,kBAEHD,GAFE,IAGLH,WAAW,KAcvB,OATAS,EAAAA,EAAAA,YAAU,WACNL,GAAc,kBACPD,GADM,IAETH,UAAWL,EAAMa,UAAUR,UAC3BC,YAAaN,EAAMa,UAAUP,YAC7BC,QAASP,EAAMa,UAAUN,aAE/B,CAACP,KAGC,UAAC,IAAD,CAAOe,UAAU,EAAOC,WAAS,EAACC,KAAMT,EAAU,UAAeU,QAASR,EAA1E,WACI,SAAC,WAAD,uBACA,SAAC,YAAD,WACI,SAAC,IAAD,CACAS,MACsC,YAA9BX,EAAU,YACV,QAC+B,YAA9BA,EAAU,YACX,SACE,MANV,UASI,SAAC,WAAD,UAAiBA,EAAU,eAGnC,SAAC,YAAD,WACI,SAAC,IAAD,CAAQW,MAAM,OAAOC,QAASV,EAA9B,0B,oICqQhB,IA1SA,SAAcV,GAEVqB,EAAAA,GAAAA,SACIC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,IAGJ,IAAMC,EAAW9B,EAAM8B,SAGvB,GAA+C3B,EAAAA,EAAAA,WAAS,GAAxD,eAAM4B,EAAN,KAAuBC,EAAvB,KACMC,GAAsBC,EAAAA,EAAAA,QAAOH,GACnCE,EAAoBE,QAAUJ,EAG9B,OAAqC5B,EAAAA,EAAAA,WAAS,GAA9C,eAAOiC,EAAP,KAAmBC,EAAnB,KAEMC,GAAWJ,EAAAA,EAAAA,UAGbK,EAAgB,CAEhBC,KAAM,OACNC,YAAa,UACbC,gBAAiB,UACjBC,MAAO,EACPC,WAAY,SACZC,OAAQ,EACRC,YAAa,GACbC,QAAS,CACLC,SAAU,YACVC,SAAU,UAKdC,EAAe,CAEfC,MAAO,mBACPX,KAAM,UACNC,YAAa,QACbC,gBAAiB,QACjBE,WAAY,UACZC,OAAQ,EACRC,YAAa,GACbH,MAAO,EACPI,QAAS,CACLC,SAAU,YACVC,SAAU,UAKlB,GAA+B9C,EAAAA,EAAAA,UAC3B,CACIiD,SAAU,KAFlB,eAAOC,EAAP,KAAgBC,EAAhB,KAqBA,GAAqCnD,EAAAA,EAAAA,UACjC,CACIoD,UAAW,CACPC,SAAU,GAEdC,MAAO,CACHC,kBAAmB,GAEvBC,4BAA6B,EAC7BC,qBAAqB,EACrBC,YAAY,EACZC,QAAS,CACLC,OAAQ,CACJC,SAAU,MACVC,OAAQ,CACJC,eAAe,GAEnBC,SAAS,GAObC,QAAS,CACLF,eAAe,EACfxB,gBAAiB,qBACjB2B,UAAW,CACPlB,MA1CpB,SAA0BmB,GAWtB,OARgC,IAA7BA,EAAYC,aACH,YAAcD,EAAYE,IAAIC,OAI9B,UAAYC,KAAKC,MAA8B,IAAxBL,EAAYE,IAAII,OAAgB,QAsC/DC,OAAO,CACHC,EAAG,CAGCtC,KAAM,OACNO,QAAS,QACTgC,KAAM,CACFC,eAAe,CACXC,OAAQ,uBACRC,OAAQ,uBACRC,KAAM,uBACNC,IAAK,uBACLC,KAAM,uBACNC,MAAO,uBACPC,QAAS,uBACTC,KAAM,wBAEVC,QAAS,SACTC,cAAc,wBAElBC,MAAO,CACHC,SAAS,EACTC,KAAM,mCACN1E,MAAO,UACP2E,KAAM,CACFC,OAAQ,kBACRC,OAAQ,SAGhBC,MAAO,CACHH,KAAM,GAEN3E,MAAO,UACP+E,UAAU,GAEdC,IAAKnG,EAAMoG,UACXC,IAAKrG,EAAMsG,SAEfC,EAAG,CACCC,aAAa,EACbb,MAAO,CACHC,SAAS,EACTC,KAAM7F,EAAMqD,SAASoD,OACrBtF,MAAO,UACP2E,KAAM,CACFC,OAAQ,kBACRC,OAAQ,SAGhBC,MAAO,CACHS,cAAe,GACfZ,KAAM,GAEN3E,MAAO,aAInBwF,SAKR,WACI,IAAIC,EAAeC,OAAOC,SAASC,KAAKC,MAAM,KAC9C,GAAGJ,EAAaA,EAAaK,OAAO,KAAOnF,EACxC,OAEHE,GAAoB,MAnGxB,eAAOkF,EAAP,KAAmBC,EAAnB,MA4GArG,EAAAA,EAAAA,YAAU,WACN,IAAIsG,EAAe,GACnBA,EAAaC,MAAb,kBAEW9E,GAFX,IAGQY,MAAOnD,EAAMqD,SAASd,cAAcY,MACpCmE,KAAMtH,EAAMqD,SAASd,cAAc+E,aAGXC,IAA7BvH,EAAMqD,SAASmE,WACdJ,EAAaC,MAAb,kBAEWnE,GAFX,IAGQoE,KAAMtH,EAAMqD,SAASmE,aAIjClE,GAAY,kBAEDD,GAFA,IAGHD,SAAUgE,OAGpB,CAACpH,KAEHc,EAAAA,EAAAA,YAAU,WACNqG,GAAe,SAACM,GACZ,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IAOzC,OANAC,EAAS7C,OAAOC,EAAEqB,IAAMnG,EAAMoG,UAC9BsB,EAAS7C,OAAOC,EAAEuB,IAAMrG,EAAMsG,QAG9BoB,EAASf,SAAWc,EAAUd,SAC9Be,EAAS5D,QAAQM,QAAQC,UAAUlB,MAAQsE,EAAU3D,QAAQM,QAAQC,UAAUlB,MACxEuE,OAEb,CAAC1H,EAAMoG,YAET,IAAM0B,EAAY,CAAC,CAEfC,WAAY,SAASC,GACjB,IAAI/F,EAAoBE,QAAQ,CAC5B,IAAI8F,EAAcD,EAAEE,OAChBC,EAA8B,EAAdF,EAAkB,IAClCG,EAAkC,EAAdH,EAAkB,IACtCI,EAA+B,IAAdJ,EAAoB,IAEzCd,GAAe,SAACM,GACZ,IAAIa,EAAaX,KAAKC,MAAMD,KAAKE,UAAUJ,IAY3C,OAXAa,EAAWzD,OAAOC,EAAEmB,MAAMH,KAAKyC,KAAOJ,EACtCG,EAAWzD,OAAO0B,EAAEN,MAAMH,KAAKyC,KAAOJ,EAEtCG,EAAWzD,OAAOC,EAAEa,MAAMG,KAAKyC,KAAOH,EACtCE,EAAWzD,OAAO0B,EAAEZ,MAAMG,KAAKyC,KAAOH,EAEtCE,EAAWxE,QAAQC,OAAOE,OAAO6B,KAAO,CAACyC,KAAMF,GAG/CC,EAAW3B,SAAWc,EAAUd,SAChC2B,EAAWxE,QAAQM,QAAQC,UAAUlB,MAAQsE,EAAU3D,QAAQM,QAAQC,UAAUlB,MAC1EmF,KAEXtG,GAAoB,OAOhC,OACiC,IAA7BqB,EAASD,SAAS6D,QACd,SAAC,IAAD,CAAQuB,QAAM,EAACC,OAAO,WAAtB,gCAEA,4BACI,UAAC,IAAD,CAAQtH,MAAM,OACVuH,QAAQ,QACRC,QAAWvG,EACXhB,QAAU,WACNiB,GAAe,GAEf,IAAIuG,EAAUtG,EAASH,QAAQ0G,cAAc,YAAY,GACrDC,EAAM,IAAIC,EAAAA,GAAM,YAAY,KAAK,CAACzG,EAASH,QAAQ6G,MAAM1G,EAASH,QAAQ+F,SAC9EY,EAAIG,SAASL,EAAS,MAAO,EAAG,EAAEtG,EAASH,QAAQ6G,MAAO1G,EAASH,QAAQ+F,QAC3EY,EAAII,KAAK,YACT7G,GAAe,SAACoF,GAAe,OAAQA,MAV/C,WAuBI,SAAC,IAAD,CAAM0B,KAAK,aAvBf,qBA0BA,gBAAKC,MAAO,CAACpF,SAAU,WAAYgF,MAAO,OAAQd,OAAQ,OAAQtC,QAAQ,QAA1E,UACI,SAAC,KAAD,CAAOyD,IAAK/G,EAAUlB,QA3GtC,SAA2BT,GACvB2I,QAAQC,KAAIC,EAAAA,EAAAA,IAAkBlH,EAASH,QAASxB,IAChD2I,QAAQC,KAAIE,EAAAA,EAAAA,IAAkBnH,EAASH,QAASxB,IAChD2I,QAAQC,KAAIG,EAAAA,EAAAA,IAAmBpH,EAASH,QAASxB,KAwGagJ,QAASzC,EAAaI,KAAMjE,EAC1ES,QAAS/B,EAAkB,KAAM+F,EACjCsB,MAAO,CAACxD,QAAS7D,EAAkB,QAAU,iB,wPCqOrE,UAlhBA,WACI,OAA+C5B,EAAAA,EAAAA,UAAS,MAAxD,eAAOyJ,EAAP,KAAwBC,EAAxB,KACA,GAAuD1J,EAAAA,EAAAA,WAAS,GAAhE,eAAO2J,EAAP,KAA4BC,EAA5B,KAGMC,GAAiB9H,EAAAA,EAAAA,QAAO0H,GAC9BI,EAAe7H,QAAUyH,EAGzB,OAAgDzJ,EAAAA,EAAAA,WAAS,GAAzD,eAAO8J,EAAP,KAAyBC,EAAzB,KAGA,GAAsD/J,EAAAA,EAAAA,UAAS,CAAC,WAAa,IAA7E,eAAOgK,EAAP,KAA4BC,EAA5B,KAmBA,SAASC,EAAsB1J,GAC3B,IAAI2J,EAAG,IAAIC,WACXD,EAAGE,iBAAiB,QAAQ,SAACC,GACzB,IAAIC,EAAgB/C,KAAKC,MAAM6C,EAAME,OAAOC,QAC5CF,EAAcG,OAAQ,EAEtB,IAAIC,EAAsBnD,KAAKC,MAAMD,KAAKE,UAAU+B,IACpDkB,EAAoBzD,KAAKqD,GAEzBb,EAAoBiB,MAExBR,EAAGS,WAAWpK,EAAGgK,OAAOK,MAAM,IAIlC,SAASC,EAAqBtK,GAC1B,IAAI2J,EAAG,IAAIC,WACPW,EAAQC,SAASxK,EAAGyK,cAAcC,aAAa,cAEnDf,EAAGE,iBAAiB,QAAQ,SAACC,GACzB,IAAIK,GAAmB,OAAOlB,GAE1B0B,EAAkB3D,KAAKC,MAAM6C,EAAME,OAAOC,QAC9CE,EAAoBI,GAAOK,aAAeD,EAC1CR,EAAoBI,GAAOM,SAAU,EAErC3B,EAAoBiB,MAExBR,EAAGS,WAAWpK,EAAGgK,OAAOK,MAAM,IAGlC,SAASS,EAA8B9K,EAAGC,GAGtCiJ,GAAoB,SAACpC,GACjB,IAAIqD,EAAsBnD,KAAKC,MAAMD,KAAKE,UAAUJ,IAEpD,OADAqD,EAAoBlK,EAAK8K,WAAWC,eAAiB/K,EAAKgE,MACnDkG,KApEA,SAyEAc,EAzEA,4EAyEf,WAAqCjL,EAAGC,GAAxC,kFACOiL,EAAAA,EAAAA,KAAcC,+BAA+BlC,EAAiBhJ,EAAK8K,WAAWC,gBADrF,wBAEYI,EAAmBpE,KAAKC,MAAMD,KAAKE,UAAU+B,EAAiBhJ,EAAK8K,aACnEM,EAAiB,CACjBL,eAAgBI,EAAiBJ,gBAGjCM,EAAc,CACdN,eAAgBI,EAAiBJ,uBAG9BI,EAAiBlB,aACjBkB,EAAiBJ,eAZhC,SAcyC,IAAIO,KACjC,CAACvE,KAAKE,UAAUkE,IAChB,CAACvJ,KAAO,qBACV2J,cAjBV,cAcQF,EAAYV,aAdpB,OAmBQU,EAAYV,aAAea,MAAMC,KAAK,IAAIC,WAAWL,EAAYV,eAnBzE,WAqBwBgB,EAAAA,EAAAA,KAAYC,eAAeP,GArBnD,QAuB0B,OAFdQ,EArBZ,QAuBeC,QACHV,EAAeT,aAAeQ,EAC9BC,EAAeW,aAAeF,EAAInF,KAAKqF,aAEvC9C,GAAoB,SAACpC,GACjB,IAAIqD,EAAsBnD,KAAKC,MAAMD,KAAKE,UAAUJ,IAEpD,OADAqD,EAAoBlK,EAAK8K,WAAaM,EAC/BlB,KAEX8B,EAAeb,EAAkBnL,EAAK8K,aAGtCe,EAAInF,KAAJ,WAAwB,EACxB8C,EAAuBqC,EAAInF,OAE/B4C,GAAoB,GAtC5B,wBAyCQA,GAAoB,GAzC5B,6CAzEe,+BAuHA2C,EAvHA,4EAuHf,WAAwClM,EAAGC,GAA3C,kFACOiL,EAAAA,EAAAA,KAAcC,+BAA+BlC,EAAiBhJ,EAAK8K,WAAWC,gBADrF,wBAEYK,EAAiBrE,KAAKC,MAAMD,KAAKE,UAAU+B,EAAiBhJ,EAAK8K,aAEjEO,EAAc,CACdN,eAAgBK,EAAeL,eAC/BgB,aAAcX,EAAeW,qBAG1BX,EAAeR,eACfQ,EAAe3I,SAV9B,SAYyC,IAAI6I,KACjC,CAACvE,KAAKE,UAAUmE,EAAeT,eAC/B,CAAC/I,KAAO,qBACV2J,cAfV,cAYQF,EAAYV,aAZpB,OAiBQU,EAAYV,aAAea,MAAMC,KAAK,IAAIC,WAAWL,EAAYV,eAjBzE,WAmBwBgB,EAAAA,EAAAA,KAAYO,kBAAkBb,GAnBtD,QAsB0B,OAHdQ,EAnBZ,QAsBeC,SACC5B,EAAsBnD,KAAKC,MAAMD,KAAKE,UAAU+B,KAChChJ,EAAK8K,WAAaM,EAEtCnC,EAAoBiB,GACpB8B,EAAeZ,EAAeT,aAAc3K,EAAK8K,aAGjDe,EAAInF,KAAJ,WAAwB,EACxB8C,EAAuBqC,EAAInF,OAE/B4C,GAAoB,GAjC5B,wBAoCQA,GAAoB,GApC5B,6CAvHe,+BA+JA0C,EA/JA,4EA+Jf,WAA8BG,EAAQC,GAAtC,wFACQC,EAAc,CACdC,SAAUH,EAAOG,SACjBC,SAAUJ,EAAOI,SACjBC,aAAcL,EAAOK,cAIrBL,EAAOM,UAKHC,EAAW,IAAIC,KAEfC,EAAuB,IAAID,KAAKD,EAASG,UAAY,KAEzDV,EAAO3G,UAAYoH,EACnBT,EAAOzG,QAAUgH,EAEjBL,EAAY7G,UAAY+E,SAASqC,EAAqBE,UAAY,KAClET,EAAY3G,QAAU6E,SAASmC,EAASI,UAAY,OAZpDT,EAAY7G,UAAY2G,EAAO3G,UAC/B6G,EAAY3G,QAAUyG,EAAOzG,SAVrC,UAyBoBiG,EAAAA,EAAAA,KAAYoB,gBAAgBZ,EAAOa,WAAYX,GAzBnE,OAyBQR,EAzBR,OA2BQlK,EAAgB,CAChBY,MAAO4J,EAAOc,YACdvG,KAAMmF,EAAI,GAAGqB,mBAGbC,EAAc,IACNxL,cAAgBA,EAIL,QAApBwK,EAAOI,SACNY,EAAYtH,OAASgG,EAAI,GAAGuB,iBAG5BD,EAAYtH,OAAS,4BAGlBsG,EAAOK,eACNX,EAAI,GAAGwB,gBAAgBC,SAAQ,SAACC,EAAMjD,EAAOkD,GAEzCD,EAAKvJ,MAAQ6H,EAAI,GAAGqB,iBAAiBO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,YAAcJ,EAAKI,aAAW3J,SAIzFmJ,EAAYvG,UAAYiF,EAAI,GAAGwB,kBAKvCpE,GAAqB,SAACpC,GAClB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IAKzC,GAJAC,EAASsF,GAAY3J,SAAW0K,EAChCrG,EAASsF,GAAYzB,aAAanF,UAAY2G,EAAO3G,UACrDsB,EAASsF,GAAYzB,aAAajF,QAAUyG,EAAOzG,QAEhDyG,EAAOM,SAAS,CACf,IAAImB,EAAUC,aACV,WACIC,EAAmB3B,EAAOC,EAAWwB,KACvC,KACN9G,EAASsF,GAAY2B,gCAAkCH,EAE3D,OAAO9G,KArEf,6CA/Je,+BAyOAgH,EAzOA,8EAyOf,WAAkC3B,EAAOC,EAAYwB,GAArD,kFAEQ5H,EAAeC,OAAOC,SAASC,KAAKC,MAAM,KAFlD,SAMoD,KAAxCJ,EAAaA,EAAaK,OAAO,MAC9B,YAAa+C,EAAe7H,QAAQ6K,IAPnD,uBAQY4B,cAAc5E,EAAe7H,QAAQ6K,GAAY2B,iCAR7D,+BAWgB,YAAa3E,EAAe7H,QAAQ6K,MAA8D,IAA/ChD,EAAe7H,QAAQ6K,GAAY6B,QAXtG,wBAYYD,cAAc5E,EAAe7H,QAAQ6K,GAAY2B,iCAEjD9E,GAAoB,SAACpC,GACjB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IACzCC,EAASoH,OAAO9B,EAAW,GAC3B,IAH+B,eAGvB+B,GAEJ,GAAGrH,EAASqH,GAAGxD,aAAa8B,SAAS,CACjC,IAAImB,EAAUC,aACV,WACIC,EAAmBhH,EAASqH,GAAGxD,aAAawD,EAAEP,KAChD,KACN9G,EAASqH,GAAGxD,aAAaoD,gCAAkCH,IAP3DO,EAAE/B,EAAY+B,EAAErH,EAAST,OAAQ8H,IAAK,EAAtCA,GAUR,OAAOrH,KA3BvB,oFAoCQkH,cAAcJ,GApCtB,kCAwCQvB,EAAc,CACdC,SAAUH,EAAOG,SACjBC,SAAUJ,EAAOI,SACjBC,aAAcL,EAAOK,cAGrBE,EAAW,IAAIC,KAEfC,EAAuB,IAAID,KAAKD,EAASG,UAAY,KAEzDR,EAAY7G,UAAY+E,SAASqC,EAAqBE,UAAY,KAClET,EAAY3G,QAAU6E,SAASmC,EAASI,UAAY,KAnDxD,WAsDoBnB,EAAAA,EAAAA,KAAYoB,gBAAgBZ,EAAOa,WAAYX,GAtDnE,QAsDQR,EAtDR,OAyDOM,EAAOK,cACNX,EAAI,GAAGwB,gBAAgBC,SAAQ,SAACC,EAAMjD,EAAOkD,GAEzCD,EAAKvJ,MAAQ6H,EAAI,GAAGqB,iBAAiBO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,YAAcJ,EAAKI,aAAW3J,SAM7FiF,GAAqB,SAACpC,GAClB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IASzC,OARAC,EAASsF,GAAY3J,SAASd,cAAc+E,KAAOmF,EAAI,GAAGqB,iBAEvDf,EAAOK,eACNL,EAAOvF,UAAYiF,EAAI,GAAGwB,iBAG9BvG,EAASsF,GAAYzB,aAAanF,UAAYoH,EAC9C9F,EAASsF,GAAYzB,aAAajF,QAAUgH,EACrC5F,KA5Ef,2DAzOe,+BAyTAsH,EAzTA,4EAyTf,WAAuCrO,EAAIC,GAA3C,wEACIiJ,GAAoB,SAACpC,GACjB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEzC,OADAC,EAAS9G,EAAK8K,WAAWmD,SAAU,EAC5BnH,KAJf,UAO0B6E,EAAAA,EAAAA,KAAY0C,iBAAiBrF,EAAiBhJ,EAAK8K,WAAWiB,cAPxF,OAUqB,MAVrB,UAWsE,IAA3D/C,EAAiBhJ,EAAK8K,WAAWH,aAAa8B,SAC7CxD,GAAoB,SAACpC,GACjB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IACzCC,EAASoH,OAAOlO,EAAK8K,UAAU,GAC/B,IAH+B,eAGvBqD,GACJ,GAAGrH,EAASqH,GAAGxD,aAAa8B,SAAS,CACjC,IAAImB,EAAUC,aACV,WACIC,EAAmBhH,EAASqH,GAAGxD,aAAawD,EAAEP,KAChD,KACN9G,EAASqH,GAAGxD,aAAaoD,gCAAkCH,IAN3DO,EAAEnO,EAAK8K,UAAWqD,EAAErH,EAAST,OAAQ8H,IAAK,EAA1CA,GASR,OAAOrH,KAIXmC,GAAoB,SAACpC,GACjB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEzC,OADAC,EAAS9G,EAAK8K,WAAWmD,SAAU,EAC5BnH,MA/BvB,4CAzTe,sBA8Vf,SAASwH,EAAcC,EAAKC,GAExB,IADA,IAAIC,EAAkB,GACdN,EAAI,EAAGA,EAAE,GAAKK,GAAaxF,EAAiB3C,OAAQ8H,IACxDM,EAAgBhI,MACZ,SAAC,WAAD,WACI,SAAC,IAAD,UACC+H,EAAYxF,EAAiB3C,QAC1B,yBACC,YAAa2C,EAAiBwF,IAC3B,SAAC,IAAD,WACI,UAAC,UAAD,YACI,SAAC,UAAD,CAAYjM,MAAM,sCAClBmM,SAAU7D,EACVC,UAAW0D,EACXG,MACAtF,KAAqB4B,EAAAA,EAAAA,KAAcC,+BAA+BlC,EAAiBwF,GAAWzD,gBAC1F,CAAE6D,QAAS,kDAAmDC,SAAU,SAExE,QAGJ,SAAC,WAAD,CAAa/D,UAAW0D,EAAWhO,QAASyL,EAA5C,0BAMZ,UAAWjD,EAAiBwF,IACxB,UAAC,IAAD,YACI,SAAC,UAAD,WACI,SAAC,UAAD,CAAYjM,MAAM,kCAClBmM,SAAU7D,EACVC,UAAW0D,EACXG,MACAtF,KAAqB4B,EAAAA,EAAAA,KAAcC,+BAA+BlC,EAAiBwF,GAAWzD,gBAC1F,CAAE6D,QAAS,kDAAmDC,SAAU,SAExE,UAIR,gBAAKC,MAAM,QAAX,UACI,UAAC,WAAD,CAAaC,MAAI,EAACxO,MAAM,OAAOuK,UAAW0D,EAAWhO,QAASwK,EAA9D,WACI,SAAC,IAAD,CAAMzC,KAAK,iBADf,eAOZ,aAAcS,EAAiBwF,IAC3B,2BACK,YAAaxF,EAAiBwF,IAC/B,SAAC,IAAD,CACIhG,MACI,CACIpF,SAAU,WACV4L,IAAK,QAASC,MAAO,QACrBC,SAAU,OACVC,WAAY,SAGpBpH,SAAO,EACPQ,KAAK,eAAehI,MAAM,SAG9B,SAAC,IAAD,CACIuK,UAAW0D,EACXhG,MACI,CACIpF,SAAU,WACV4L,IAAK,QAASC,MAAO,QACrBE,WAAY,QACZD,SAAU,OACVE,OAAQ,UACR9H,OAAQ,QACRc,MAAO,SAGfG,KAAK,gBAAgBhI,MAAM,MAC3BC,QAAS4N,KAGb,SAAC,IAAD,CAAQiB,GAAG,KAAKC,UAAU,SAA1B,SACKtG,EAAiBwF,GAAWzD,kBAEjC,SAAC,IAAD,KACI,SAAC,IAAD,CACI7J,SAAS,GACTuB,SAAYuG,EAAiBwF,GAAW/L,SACxC+C,UACmE,kBAAxDwD,EAAiBwF,GAAW7D,aAAanF,UAC5CwD,EAAiBwF,GAAW7D,aAAanF,UAEkB,kBAAxDwD,EAAiBwF,GAAW7D,aAAanF,UAC5C,IAAImH,KAAK3D,EAAiBwF,GAAW7D,aAAanF,WAElD,IAAImH,KAA0D,IAArD3D,EAAiBwF,GAAW7D,aAAanF,WAE1DE,QACiE,kBAAtDsD,EAAiBwF,GAAW7D,aAAajF,QAC5CsD,EAAiBwF,GAAW7D,aAAajF,QAEgB,kBAAtDsD,EAAiBwF,GAAW7D,aAAajF,QAC5C,IAAIiH,KAAK3D,EAAiBwF,GAAW7D,aAAajF,SAElD,IAAIiH,KAAwD,IAAnD3D,EAAiBwF,GAAW7D,aAAajF,YAGlE,SAAC,IAAD,KACA,UAAC,IAAD,CAAOnF,MAAM,OAAQiI,MAAO,CAAC4G,OAAQ,UAAUG,MAAO,QAASC,UAAW,QAASH,GAAG,QAAQ1H,KAAK,QAAnG,WACI,SAAC,IAAD,CAAMY,KAAK,cACX,kBAAO3G,KAAK,OAAO4G,MAAO,CAACxD,QAAS,QAChC8F,UAAW0D,EAAWE,SAAUrE,IAHxC,4BAOA,sBAGJ,SAAC,IAAD,CAAQzC,QAAM,EAACC,OAAO,WAAtB,0CAIJ,UAAC,IAAD,CAAOtH,MAAM,OAAOiI,MAAO,CAAC4G,OAAQ,WAAYC,GAAG,QAAQ1H,KAAK,MAAhE,WACQ,SAAC,IAAD,CAAMY,KAAK,SACX,kBAAO3G,KAAK,OAAO4G,MAAO,CAACxD,QAAS,QAAS0J,SAAUjF,IAF/D,2BAvHU0E,IAgItBK,IAEJ,OAAOC,EAkBX,OAxeAvO,EAAAA,EAAAA,YAAU,WAAM,wCACZ,6GAC6ByL,EAAAA,EAAAA,KAAY8D,kBADzC,OACQC,EADR,iBAEsBA,GAFtB,IAEI,IAAI,EAAJ,sBAAQvD,EAAuB,SACpBxB,aAAe5D,KAAKC,MAAM2I,EAAAA,GAAAA,KAAYxD,EAAOxB,aAAa,WAHzE,8BAOI,IAFA1B,EAAoByG,GACpBvG,GAAwB,GAChBgF,EAAE,EAAGA,EAAGuB,EAAarJ,OAAQ8H,IACjCnC,EAAe0D,EAAavB,GAAGxD,aAAawD,GARpD,4CADY,uBAAC,WAAD,wBAYZyB,KAEF,KA2dE,4BACI,SAAC,IAAD,CAAMzP,UAAQ,EAAd,UACI,SAAC,QAAD,WACI,SAAC,WAAD,CAAaiI,MAAO,GAApB,UACI,SAAC,IAAD,CAAUyH,SAAO,EAACC,YAAU,EAA5B,UACI,SAAC,IAAD,CAAQT,GAAG,KAAKC,UAAU,SAA1B,gDAKhB,kBACGpG,GAIC,SAAC,IAAD,CAAM6G,WAAS,EAACC,QAAM,EAACC,QAAS,EAAhC,SA/BZ,WAGI,IAFA,IAAIC,EAAe,GACf1B,EAAY,EACRL,EAAG,EAAGA,EAAE,GAAKK,GAAaxF,EAAiB3C,OAAQ8H,IACvD+B,EAAazJ,MACT,SAAC,QAAD,UACK6H,EAAcH,EAAEK,IADNL,IAInBK,GAAa,EAGjB,OAAO0B,EAoBMC,MAJL,SAAC,IAAD,CAAQvI,QAAM,EAACC,OAAO,WAAtB,mDAOJ,SAAC,IAAD,CACIrI,YAAY,IACZS,UAAWsJ,S,mBCjZ3B,IAnIA,WA+HI,MAAO,CAAC6G,wBA9HR,SAAiCpM,GAI7B,QADY,IAAIqM,OADF,qBAELC,KAAKtM,IA0HcuM,+BAnHhC,SAAwCvM,GAIpC,QADY,IAAIqM,OADF,YAELC,KAAKtM,IA+G6CwM,4BAxG/D,SAAqCxM,GAIjC,QADY,IAAIqM,OADF,mDAELC,KAAKtM,IAqGdkH,+BAnFJ,SAAwClH,GAEpC,YAAa2C,IAAV3C,GAAiC,OAAVA,GAA4B,KAAVA,GAiFbyM,WA9FnC,SAAoBzM,GAIhB,QADY,IAAIqM,OADF,wBAELC,KAAKtM,IA0F4B0M,+BA3E9C,SAAwC1M,GAEpC,OAAoB,IAAjBA,EAAMqC,QAyEiEsK,eAnE9E,SAAwB3M,GACpB,GAAa,OAAVA,EACC,OAAO,EAEX,IAAI4M,EAAc5M,EAAMoC,MAAM,KAC9B,GAA0B,IAAvBwK,EAAYvK,OAwCX,OAAO,EAvCP,IAAIwK,EAAcD,EAAY,GAAGxK,MAAM,KACnC0K,EAAcF,EAAY,GAAGxK,MAAM,KAEnC1B,EAAQ6F,SAASsG,EAAY,IAC7BrM,EAAM+F,SAASsG,EAAY,IAC/B,GAAGnM,GAAS,GACR,GAAGA,EAAQ,IAAM,EACb,GAAa,IAAVA,GACC,GAqCpB,SAAoBE,GAChB,GAAGA,EAAO,IAAM,EAAE,CACd,GAAGA,EAAO,MAAQ,EAMd,OAAO,EALP,GAAGA,EAAO,MAAQ,EACd,OAAO,EAQnB,OAAO,EAjDYmM,CAAWxG,SAASsG,EAAY,MAC/B,GAAGrM,EAAM,GACL,OAAO,OAIX,GAAGA,EAAM,GACL,OAAO,OAKf,GAAGA,EAAM,GACL,OAAO,OAMnB,GAAGE,EAAQ,IAAM,GACVF,EAAM,GACL,OAAO,EAKnB,QAAGsM,EAAY,GAAK,Q,4ECyShC,MA5YA,WACE,IAAME,ECEgB,0BD6WtB,MAAO,CACLC,WA7WF,SAAoB5E,GAGlB,OAAO6E,IAAAA,IAFQF,oCAEW,CAACG,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,KAAJ,WAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAoWb2R,cA9VF,SAAuBC,EAAIC,GACzB,IAAIC,EAAWT,EAAS,cAAgBO,EAExC,OAAOL,IAAAA,IAAUO,GAAUL,MAAK,SAACvF,GAE3B2F,EAAiB3F,EAAInF,KAAJ,WAEnB2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAqVb+R,aA/UF,SAAsBC,GAGpB,OAAOT,IAAAA,KAFQF,sCAEYW,GAAMP,MAAK,SAACvF,GAEjC,OAAOA,EAAG,QAEZwF,OAAM,SAAU1C,GAId,OAFAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SAC5B+I,QAAQC,IAAI,kBAAmBgG,EAAMiD,UAC9BjD,EAAMiD,SAAN,SAqUbC,gBA/TF,SAAyBxF,GAGvB,OAAO6E,IAAAA,IAFQF,yCAEW,CAACG,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,KAAJ,gBAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAsTbmS,iBAhTF,SAA0BzF,EAAamF,GAGrC,OAAON,IAAAA,IAFQF,0CAEW,CAACG,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD2F,EAAiB3F,EAAInF,KAAJ,kBAEnB2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAuSboS,oBAjSF,SAA6BR,EAAIC,GAC/B,IAAIC,EAAWT,EAAS,oBAAsBO,EAE9C,OAAOL,IAAAA,IAAUO,GAAUL,MAAK,SAACvF,GAE3B2F,EAAiB3F,EAAInF,KAAJ,iBAEnB2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAwRbqS,mBAlRF,SAA4BL,GAG1B,OAAOT,IAAAA,KAFQF,4CAEYW,GAAMP,MAAK,SAACvF,GAEjC,OAAOA,EAAG,QAEZwF,OAAM,SAAU1C,GAId,OAFAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SAC5B+I,QAAQC,IAAI,kBAAmBgG,EAAMiD,UAC9BjD,EAAMiD,SAAN,SAwQbK,2BAlQF,SAAoCN,GAGlC,OAAOT,IAAAA,KAFQF,oDAEYW,GAAMP,MAAK,SAACvF,GAEjC,OAAOA,EAAG,QAEZwF,OAAM,SAAU1C,GAId,OAFAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SAC5B+I,QAAQC,IAAI,kBAAmBgG,EAAMiD,UAC9BjD,EAAMiD,SAAN,SAwPbM,4BAlPF,SAAqCX,EAAIC,GACvC,IAAIC,EAAWT,EAAS,2BAA6BO,EAErD,OAAOL,IAAAA,IAAUO,GAAUL,MAAK,SAACvF,GAE3B2F,EAAiB3F,EAAInF,KAAJ,yBAEnB2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAyObwS,mBAlOF,SAA4B9F,GAG1B,OAAO6E,IAAAA,IAFQF,sCAEW,CAACG,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,KAAJ,aAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAyNbyS,iCAnNF,SAA0Cb,GACxC,IAAIE,EAAWT,EAAS,gBAAkBO,EAAK,gBAE/C,OAAOL,IAAAA,IAAUO,GAAUL,MAAK,SAACvF,GAE3B,OAAOA,EAAInF,QAEb2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SA0Mb0S,qCApMF,SAA8CC,EAAwBjG,GACpE,IAAIoF,EAAWT,EAAS,2BAA6BsB,EAAyB,iBAE9E,OAAOpB,IAAAA,IAAUO,EAAS,CAACN,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,KAAJ,iBAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SA2LboN,gBAtLF,SAAyBC,EAAYX,GACnC,IAAIoF,EAAWT,EAAS,gBAAkBhE,EAAa,QAEvD,OAAOkE,IAAAA,IAAUO,EAAS,CAACN,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,KAAJ,YAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SA6Kb4S,kBAxKF,SAA2BZ,GAGzB,OAAOT,IAAAA,MAFQF,sCAEaW,GAAMP,MAAK,SAACvF,GAElC,OAAOA,EAAInF,KAAJ,kBAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SA+Jb8P,gBA1JF,WAGE,OAAOyB,IAAAA,IAFQF,0CAEYI,MAAK,SAACvF,GAE3B,OAAOA,EAAInF,KAAJ,gBAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAiJbiM,eA5IF,SAAwB+F,GAGtB,OAAOT,IAAAA,KAFQF,uCAEYW,GAAMP,MAAK,SAACvF,GAEjC,OAAOA,KAETwF,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrBgP,EAAMiD,aAmInB1F,kBA9HF,SAA2ByF,GAGzB,OAAOT,IAAAA,IAFQF,2CAEWW,GAAMP,MAAK,SAACvF,GAEhC,OAAOA,KAETwF,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrBgP,EAAMiD,aAqHnBvD,iBAhHF,SAA0BkD,GACxB,IAAIE,EAAWT,EAAS,oBAAsBO,EAE9C,OAAOL,IAAAA,OAAaO,GAAUL,MAAK,SAACvF,GAE9B,OAAOA,EAAIC,UAEbuF,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAuGb6S,cAjGF,SAAuBnG,GAGrB,OAAO6E,IAAAA,IAFQF,kCAEW,CAACG,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,KAAJ,cAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAwFb8S,YAlFF,SAAqBC,GACnB,IAAIjB,EAAWT,EAAS,YAAc0B,EAEtC,OAAOxB,IAAAA,IAAUO,GAAUL,MAAK,SAACvF,GAE3B,OAAOA,EAAInF,KAAJ,cAET2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SAyEbgT,WApEF,SAAoBD,GAClB,IAAIjB,EAAWT,EAAS,cAAgB0B,EAExC,OAAOxB,IAAAA,OAAaO,GAAUL,MAAK,SAACvF,GAE9B,OAAOA,EAAInF,QAEb2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SA2DbiT,+BAtDF,SAAwCvG,GAGtC,OAAO6E,IAAAA,IAFQF,qCAEW,CAACG,OAAQ9E,IAAc+E,MAAK,SAACvF,GAEjD,OAAOA,EAAInF,QAEb2K,OAAM,SAAU1C,GAGd,OADAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SACrB,SA6CbkT,WAvCF,SAAoBlB,GAGlB,OAAOT,IAAAA,KAFQF,iCAEYW,GAAMP,MAAK,SAACvF,GAEjC,OAAOA,EAAG,QAEZwF,OAAM,SAAU1C,GAId,OAFAjG,QAAQC,IAAI,SAAUgG,EAAMhP,SAC5B+I,QAAQC,IAAI,kBAAmBgG,EAAMiD,UAC9BjD,EAAMiD,SAAN","sources":["components/CustomModal.js","components/Plot.js","pages/HomePage.js","utils/ValidInputs.js","utils/api/ApiModule.js","configurations/Configurations.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Button, Modal, Message} from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CustomModal(props){\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const [modalState, setModalState] = useState(\r\n        {\r\n            successPath: props.successPath,\r\n            openModal: false,\r\n            messageType: null,\r\n            message: null\r\n        }\r\n    )  \r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(modalState.messageType === \"success\"){\r\n            navigate(modalState.successPath)\r\n        }\r\n        props.modalInfo.openModal = false\r\n        setModalState(\r\n            {\r\n                ...modalState,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setModalState({\r\n            ...modalState,\r\n            openModal: props.modalInfo.openModal,\r\n            messageType: props.modalInfo.messageType,\r\n            message: props.modalInfo.message\r\n        })\r\n    },[props])\r\n\r\n    return(\r\n        <Modal centered={false} closeIcon open={modalState[\"openModal\"]} onClose={modalCloseHandler}>\r\n            <Modal.Header>Message</Modal.Header>\r\n            <Modal.Content>\r\n                <Message \r\n                color= {\r\n                        modalState[\"messageType\"] === \"success\" ? \r\n                        \"green\"\r\n                        :modalState[\"messageType\"] === \"warning\" ?\r\n                        \"orange\"\r\n                        : \"red\" \r\n                    }\r\n                >\r\n                    <Message.Header>{modalState[\"message\"]}</Message.Header>\r\n                </Message>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='grey' onClick={modalCloseHandler}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CustomModal;","import React, { useEffect, useState } from 'react';\r\nimport {\r\nChart as ChartJS,\r\nCategoryScale,\r\nLinearScale,\r\nPointElement,\r\nLineElement,\r\nTitle,\r\nTooltip,\r\nLegend,\r\nTimeScale,\r\n} from 'chart.js';\r\nimport {Chart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent} from 'react-chartjs-2';\r\nimport {Loader, Button, Icon} from 'semantic-ui-react';\r\nimport { useRef } from 'react';\r\nimport html2canvas from \"html2canvas\";\r\nimport jsPDF from 'jspdf';\r\nimport 'date-fns';\r\n\r\nfunction Plot(props){\r\n    \r\n    ChartJS.register(\r\n        CategoryScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend,\r\n        TimeScale,\r\n    );\r\n\r\n    const plotPath = props.plotPath;\r\n\r\n    //used to control the display of the chart after font sizes have been changed/adapted\r\n    const[adaptedFontSizes,setAdaptedFontSizes]  = useState(false);\r\n    const adaptedFontSizesRef = useRef(adaptedFontSizes);\r\n    adaptedFontSizesRef.current = adaptedFontSizes\r\n\r\n    //used to show a loading state on the button that generates a PDF Image from the chart\r\n    const [chartPDFGen,setChartPDFGen] = useState(false);\r\n    \r\n    const chartRef = useRef();\r\n\r\n    //raw or metric data points dataset\r\n    let dataSetMetric = {\r\n        //\"label\" and \"data\" properties missing from input\r\n        type: \"line\",\r\n        borderColor: '#007bff',\r\n        backgroundColor: '#007bff',\r\n        order: 2,\r\n        pointStyle: \"circle\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    //plans dataset\r\n    let dataSetPlans = {\r\n        //\"data\" property missing from input\r\n        label: 'Adaptation Plans',\r\n        type: \"scatter\",\r\n        borderColor: 'black',\r\n        backgroundColor: 'white',\r\n        pointStyle: \"rectRot\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        order: 1,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    // \"datasets\" is an array of dataset objects where each object holds its properties and the y and x axis values.  \r\n    const [plotData,setPlotData] = useState(\r\n        {\r\n            datasets: []    \r\n        }\r\n    )\r\n\r\n    //function that handles what information is shown on the plot for a point that is hovered by the user\r\n    function plotLabelHandler(tooltipItem){\r\n        let label\r\n        //if datasetIndex is 1, then it is the dataset relative to Plans\r\n        if(tooltipItem.datasetIndex === 1){\r\n            label = \"Plan Id: \" + tooltipItem.raw.planId\r\n        }\r\n        else{\r\n            //round the value to 3 decimal places\r\n            label = \"Value: \" + Math.round(tooltipItem.raw.value * 1000) / 1000; \r\n        }\r\n        \r\n        return label;\r\n    }\r\n\r\n    const [plotOptions,setPlotOptions] = useState(\r\n        {\r\n            animation: {\r\n                duration: 0\r\n            },\r\n            hover: {\r\n                animationDuration: 0,\r\n            },\r\n            responsiveAnimationDuration: 0,\r\n            maintainAspectRatio: true,\r\n            responsive: true,\r\n            plugins: {\r\n                legend: {\r\n                    position: 'top',\r\n                    labels: {\r\n                        usePointStyle: true,\r\n                    },\r\n                    reverse: true\r\n                },\r\n                /* //In case it is wanted to show a title for the Chart\r\n                title: {\r\n                    display: true,\r\n                    text: 'Chart.js Line Chart',\r\n                },*/\r\n                tooltip: {\r\n                    usePointStyle: true,\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                    callbacks: {\r\n                        label: plotLabelHandler\r\n                    },\r\n                }\r\n            },\r\n            scales:{\r\n                x: {\r\n                    //this will make values received from api, which are in epoch millisecond, to be converted into the local timezone\r\n                    //and formated into the specified formats\r\n                    type: 'time',\r\n                    parsing: 'false',\r\n                    time: {\r\n                        displayFormats:{\r\n                            second: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            minute: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            hour: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            day: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            week: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            month: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            quarter: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            year: \"dd/MM/yyyy, HH:mm:ss\",\r\n                        },\r\n                        minUnit: \"second\",\r\n                        tooltipFormat:\"dd/MM/yyyy, HH:mm:ss\",\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: \"TimeStamp (dd/MM/yyyy, HH:mm:ss)\",\r\n                        color: '#0057b3',\r\n                        font: {\r\n                            family: 'Times New Roman',\r\n                            weight: 'bold',\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        font: {\r\n                        },\r\n                        color: \"#000000\",\r\n                        autoSkip: true,\r\n                    },\r\n                    min: props.startDate,\r\n                    max: props.endDate,\r\n                },\r\n                y: {\r\n                    beginAtZero: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: props.plotData.ylabel,\r\n                        color: '#0057b3',\r\n                        font: {\r\n                            family: 'Times New Roman',\r\n                            weight: 'bold',\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        maxTicksLimit: 20,\r\n                        font: {\r\n                        },\r\n                        color: \"#000000\"\r\n                    },\r\n                } \r\n            },\r\n            onResize: resetFontVariables\r\n        }\r\n    )\r\n\r\n    //this is done to readapt font sizes in case of a resize of the page\r\n    function resetFontVariables(){\r\n        let currLocation = window.location.href.split(\"/\")\r\n        if(currLocation[currLocation.length-1] !== plotPath){\r\n           return\r\n        }\r\n        setAdaptedFontSizes(false)\r\n    }\r\n\r\n    function chartClickHandler(ev){\r\n        console.log(getDatasetAtEvent(chartRef.current, ev));\r\n        console.log(getElementAtEvent(chartRef.current, ev));\r\n        console.log(getElementsAtEvent(chartRef.current, ev));\r\n    }\r\n\r\n    useEffect(() => {\r\n        let datasetsTemp = []\r\n        datasetsTemp.push(\r\n            {\r\n                ...dataSetMetric,\r\n                label: props.plotData.dataSetMetric.label,\r\n                data: props.plotData.dataSetMetric.data\r\n            }\r\n        )\r\n        if(props.plotData.plansData !== undefined){\r\n            datasetsTemp.push(\r\n                {\r\n                    ...dataSetPlans,\r\n                    data: props.plotData.plansData\r\n                }\r\n            )\r\n        }\r\n        setPlotData(\r\n            {\r\n                ...plotData,\r\n                datasets: datasetsTemp\r\n            }\r\n        )\r\n    },[props])\r\n\r\n    useEffect(() => {\r\n        setPlotOptions((prevState) => {\r\n            let newState = JSON.parse(JSON.stringify(prevState))\r\n            newState.scales.x.min = props.startDate\r\n            newState.scales.x.max = props.endDate\r\n            //the next lines are needed because json way to copy one object into another doesn't support types beyond\r\n            //primitives(string,number...). In this case, onResize and label are functions\r\n            newState.onResize = prevState.onResize\r\n            newState.plugins.tooltip.callbacks.label = prevState.plugins.tooltip.callbacks.label\r\n            return newState\r\n        })\r\n    },[props.startDate])\r\n\r\n    const myplugins = [{\r\n        /* Adjust font sizes according to chart size */\r\n        beforeDraw: function(c) {\r\n            if(!adaptedFontSizesRef.current){\r\n                var chartHeight = c.height\r\n                var ticksFontSize = chartHeight * 3 / 100\r\n                var axisLabelFontSize = chartHeight * 5 / 100\r\n                var legendFontSize = chartHeight * 3.5 / 100\r\n\r\n                setPlotOptions((prevState)=>{\r\n                    let newOptions = JSON.parse(JSON.stringify(prevState))\r\n                    newOptions.scales.x.ticks.font.size = ticksFontSize\r\n                    newOptions.scales.y.ticks.font.size = ticksFontSize\r\n\r\n                    newOptions.scales.x.title.font.size = axisLabelFontSize\r\n                    newOptions.scales.y.title.font.size = axisLabelFontSize\r\n\r\n                    newOptions.plugins.legend.labels.font = {size: legendFontSize}\r\n                    //the next lines are needed because json way to copy one object into another doesn't support types beyond\r\n                    //primitives(string,number...). In this case, onResize and label are functions\r\n                    newOptions.onResize = prevState.onResize\r\n                    newOptions.plugins.tooltip.callbacks.label = prevState.plugins.tooltip.callbacks.label\r\n                    return newOptions\r\n                })\r\n                setAdaptedFontSizes(true)\r\n\r\n            }\r\n        }\r\n            \r\n    }]\r\n\r\n    return(\r\n        plotData.datasets.length === 0 ?\r\n            <Loader active inline='centered'> Preparing chart </Loader>\r\n        :    \r\n            <div>\r\n                <Button color=\"grey\"\r\n                    floated='right'\r\n                    loading = {chartPDFGen}\r\n                    onClick={ () => {\r\n                        setChartPDFGen(true)\r\n                        \r\n                        let imgFile = chartRef.current.toBase64Image(\"image/png\",1);\r\n                        let doc = new jsPDF('landscape',\"px\",[chartRef.current.width,chartRef.current.height]);\r\n                        doc.addImage(imgFile, \"PNG\", 0, 0,chartRef.current.width, chartRef.current.height);\r\n                        doc.save('Plot.pdf');\r\n                        setChartPDFGen((prevState) => {return !prevState})\r\n\r\n                        /*let canvasElem = chartRef.current.canvas;\r\n                        //html2canvas used to improve quality. scale of 5 increases resolution in 5x\r\n                        html2canvas(canvasElem, {scale: 3}).then((canvas) => {\r\n                            let imgFile = canvas.toDataURL(\"image/png\", 1);\r\n                            let doc = new jsPDF('landscape',\"px\",[canvas.width,canvas.height],true,true);\r\n                            doc.addImage(imgFile, \"PNG\", 0, 0, canvas.width,canvas.height);\r\n                            doc.save('Plot.pdf');\r\n                            setChartPDFGen((prevState) => {return !prevState})\r\n                        })*/\r\n                    }}\r\n                >\r\n                    <Icon name='download' />\r\n                    Download Chart\r\n                </Button>\r\n                <div style={{position: \"relative\", width: \"100%\", height: \"100%\", display:\"flex\"}}>\r\n                    <Chart ref={chartRef} onClick={chartClickHandler} options={plotOptions} data={plotData} \r\n                        plugins={adaptedFontSizes? null: myplugins}\r\n                        style={{display: adaptedFontSizes? \"block\" : \"none\"}}\r\n                    />\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Plot;","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Grid, Segment, Divider, Header, Form, Loader, Icon, Label } from 'semantic-ui-react';\r\nimport 'chartjs-adapter-date-fns';\r\nimport ApiModule from '../utils/api/ApiModule';\r\nimport Plot from '../components/Plot';\r\nimport ValidInputs from '../utils/ValidInputs';\r\nimport { Buffer } from 'buffer';\r\nimport CustomModal from '../components/CustomModal';\r\n\r\nfunction HomePage(){\r\n    const [userPlotsConfigs,setUserPlotsConfigs] = useState(null);\r\n    const [userPlotsConfigsread,setUserPlotsConfigsread] = useState(false);\r\n    \r\n    //do this to access last state variable inside setInterval function for performing live plots\r\n    const plotConfigsRef = useRef(userPlotsConfigs);\r\n    plotConfigsRef.current = userPlotsConfigs\r\n    \r\n    //used to disable the appearence of errors when a 1st submission of the form hasn't been done\r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n\r\n    //variable used for the modal\r\n    const [postResponseMessage, setPostResponseMessage] = useState({\"openModal\": false})\r\n\r\n    useEffect(() => {\r\n        async function makeAPIRequest(){\r\n            let plotsConfigs = await ApiModule().getPlotsConfigs();\r\n            for(let config of plotsConfigs){\r\n                config.configObject = JSON.parse(Buffer.from(config.configObject,'base64'))\r\n            }\r\n            setUserPlotsConfigs(plotsConfigs)\r\n            setUserPlotsConfigsread(true)\r\n            for(let i=0; i< plotsConfigs.length; i++){\r\n                handlePlotData(plotsConfigs[i].configObject,i)\r\n            }\r\n        }\r\n        makeAPIRequest()\r\n\r\n    },[]);\r\n\r\n    //read plot config from file\r\n    function readPlotConfigHandler(ev){\r\n        var fr=new FileReader();\r\n        fr.addEventListener('load', (event) => {\r\n            let newPlotConfig = JSON.parse(event.target.result)\r\n            newPlotConfig.ready = false;\r\n\r\n            let newUserPlotsConfigs = JSON.parse(JSON.stringify(userPlotsConfigs))\r\n            newUserPlotsConfigs.push(newPlotConfig)\r\n            \r\n            setUserPlotsConfigs(newUserPlotsConfigs)\r\n        });\r\n        fr.readAsText(ev.target.files[0])\r\n    }\r\n\r\n    //read plot config from file\r\n    function replaceConfigHandler(ev){\r\n        var fr=new FileReader();\r\n        let index = parseInt(ev.currentTarget.getAttribute(\"plotindex\"))\r\n\r\n        fr.addEventListener('load', (event) => {\r\n            let newUserPlotsConfigs = [...userPlotsConfigs]\r\n            \r\n            let newConfigObject = JSON.parse(event.target.result)\r\n            newUserPlotsConfigs[index].configObject = newConfigObject\r\n            newUserPlotsConfigs[index].replace = true\r\n\r\n            setUserPlotsConfigs(newUserPlotsConfigs)\r\n        });\r\n        fr.readAsText(ev.target.files[0])\r\n    }\r\n\r\n    function onPlotConfigNameChangeHandler(ev,atts){\r\n        //has to consider last state even though it is not rendered, because the user may start adding\r\n        //another config before saving the previous. Hardly that will happen, but do this for precaution. \r\n        setUserPlotsConfigs((prevState) => {\r\n            let newUserPlotsConfigs = JSON.parse(JSON.stringify(prevState))\r\n            newUserPlotsConfigs[atts.plotindex].plotConfigName = atts.value\r\n            return newUserPlotsConfigs\r\n        })\r\n    }\r\n\r\n    //insert plot config on database\r\n    async function savePlotConfigHandler(ev,atts){\r\n        if(ValidInputs().validStringOrDropDownSelection(userPlotsConfigs[atts.plotindex].plotConfigName)){\r\n            let configObjectTemp = JSON.parse(JSON.stringify(userPlotsConfigs[atts.plotindex]))\r\n            let plotConfigTemp = {\r\n                plotConfigName: configObjectTemp.plotConfigName, \r\n            }\r\n\r\n            let requestBody = {\r\n                plotConfigName: configObjectTemp.plotConfigName, \r\n            }\r\n            \r\n            delete configObjectTemp.ready\r\n            delete configObjectTemp.plotConfigName\r\n            \r\n            requestBody.configObject = await new Blob(\r\n                [JSON.stringify(configObjectTemp)],\r\n                {type : 'application/json'}\r\n            ).arrayBuffer();\r\n            \r\n            requestBody.configObject = Array.from(new Uint8Array(requestBody.configObject))\r\n            \r\n            let res = await ApiModule().savePlotConfig(requestBody)\r\n\r\n            if(res.status === 200){\r\n                plotConfigTemp.configObject = configObjectTemp\r\n                plotConfigTemp.plotConfigId = res.data.plotConfigId\r\n                \r\n                setUserPlotsConfigs((prevState) => {\r\n                    let newUserPlotsConfigs = JSON.parse(JSON.stringify(prevState))\r\n                    newUserPlotsConfigs[atts.plotindex] = plotConfigTemp\r\n                    return newUserPlotsConfigs\r\n                })\r\n                handlePlotData(configObjectTemp, atts.plotindex)\r\n            }\r\n            else{\r\n                res.data[\"openModal\"] = true\r\n                setPostResponseMessage(res.data)\r\n            }\r\n            setFormErrorDisplay(false)\r\n        }\r\n        else{\r\n            setFormErrorDisplay(true)\r\n        }\r\n    }\r\n\r\n    //replace plot config on database by sending the plotConfigId\r\n    async function replacePlotConfigHandler(ev,atts){\r\n        if(ValidInputs().validStringOrDropDownSelection(userPlotsConfigs[atts.plotindex].plotConfigName)){\r\n            let plotConfigTemp = JSON.parse(JSON.stringify(userPlotsConfigs[atts.plotindex]))\r\n\r\n            let requestBody = {\r\n                plotConfigName: plotConfigTemp.plotConfigName, \r\n                plotConfigId: plotConfigTemp.plotConfigId\r\n            }\r\n            \r\n            delete plotConfigTemp.replace\r\n            delete plotConfigTemp.plotData\r\n            \r\n            requestBody.configObject = await new Blob(\r\n                [JSON.stringify(plotConfigTemp.configObject)],\r\n                {type : 'application/json'}\r\n            ).arrayBuffer();\r\n            \r\n            requestBody.configObject = Array.from(new Uint8Array(requestBody.configObject))\r\n            \r\n            let res = await ApiModule().replacePlotConfig(requestBody)\r\n\r\n            //if res is successful handlePlotData\r\n            if(res.status === 200){\r\n                let newUserPlotsConfigs = JSON.parse(JSON.stringify(userPlotsConfigs))\r\n                newUserPlotsConfigs[atts.plotindex] = plotConfigTemp\r\n                \r\n                setUserPlotsConfigs(newUserPlotsConfigs)\r\n                handlePlotData(plotConfigTemp.configObject, atts.plotindex)\r\n            }\r\n            else{\r\n                res.data[\"openModal\"] = true\r\n                setPostResponseMessage(res.data)\r\n            }\r\n            setFormErrorDisplay(false)\r\n        }\r\n        else{\r\n            setFormErrorDisplay(true)\r\n        }\r\n    }\r\n\r\n    async function handlePlotData(config, plotsindex){\r\n        let queryParams = {\r\n            metricId: config.metricId,\r\n            dataType: config.dataType,\r\n            addPlansInfo: config.addPlansInfo\r\n        }\r\n\r\n        //if it is not a live plot, then dates were defined in inputs\r\n        if(!config.livePlot){\r\n            queryParams.startDate = config.startDate\r\n            queryParams.endDate = config.endDate\r\n        }\r\n        else{\r\n            let currDate = new Date();\r\n            //subtract 60000 to value of currDate to get the timestamp 1 minute ago\r\n            let currDateMinus1Minute = new Date(currDate.getTime() - 60000)\r\n            \r\n            config.startDate = currDateMinus1Minute\r\n            config.endDate = currDate\r\n\r\n            queryParams.startDate = parseInt(currDateMinus1Minute.valueOf() / 1000)\r\n            queryParams.endDate = parseInt(currDate.valueOf() / 1000)\r\n        }\r\n        \r\n        //get data to plot from API\r\n        let res = await ApiModule().getResourceData(config.resourceId, queryParams)\r\n\r\n        let dataSetMetric = {\r\n            label: config.metricLabel,\r\n            data: res[0].listOfDataPoints\r\n        }   \r\n\r\n        let newPlotData = {}\r\n        newPlotData.dataSetMetric = dataSetMetric\r\n        \r\n        //define y axis label based on being raw data or metric data. If it is raw data then use the description \r\n        //information retrieved by the API\r\n        if(config.dataType === \"raw\"){\r\n            newPlotData.ylabel = res[0].descriptionInfo\r\n        }\r\n        else{\r\n            newPlotData.ylabel = \"Metric value ( 0<= y <=1)\"\r\n\r\n            //access plansInfo data points and add them to the plot if addPlans option was set \r\n            if(config.addPlansInfo){\r\n                res[0].listOfPlansInfo.forEach((item, index, array) => { \r\n                    //set y coordinate of plans dataset points to the same value of the metrics dataset\r\n                    item.value = res[0].listOfDataPoints.find(elem => elem.valueTime === item.valueTime).value\r\n                })\r\n\r\n                //set the plans dataset after processing y coordinate.\r\n                newPlotData.plansData = res[0].listOfPlansInfo\r\n            }\r\n        }\r\n\r\n        //update state variable to trigger render\r\n        setUserPlotsConfigs( (prevState) => {\r\n            let newState = JSON.parse(JSON.stringify(prevState)) \r\n            newState[plotsindex].plotData = newPlotData\r\n            newState[plotsindex].configObject.startDate = config.startDate\r\n            newState[plotsindex].configObject.endDate = config.endDate\r\n            //if live plot was set, perform API data request each second. Pass timerId for updating and clearing purposes\r\n            if(config.livePlot){\r\n                let timerId = setInterval( \r\n                    () => {\r\n                        handleLivePlotData(config,plotsindex,timerId)\r\n                    },1000)\r\n                newState[plotsindex].liveDataAPIRequestFunctionTimer = timerId\r\n            }\r\n            return newState\r\n        })\r\n        \r\n    }\r\n\r\n    async function handleLivePlotData(config,plotsindex, timerId){\r\n        //get current location to verify if navbar was clicked and thereby stop executing this function in a loop\r\n        let currLocation = window.location.href.split(\"/\")\r\n        try{\r\n            if(\r\n                //May have to change this path when more features considering resources are added\r\n                currLocation[currLocation.length-1] !== \"\" \r\n                || \"replace\" in plotConfigsRef.current[plotsindex]){\r\n                clearInterval(plotConfigsRef.current[plotsindex].liveDataAPIRequestFunctionTimer);\r\n                return;\r\n            }\r\n            else if(\"removed\" in plotConfigsRef.current[plotsindex] && plotConfigsRef.current[plotsindex].removed === true){\r\n                clearInterval(plotConfigsRef.current[plotsindex].liveDataAPIRequestFunctionTimer);\r\n               \r\n                setUserPlotsConfigs((prevState) => {\r\n                    let newState = JSON.parse(JSON.stringify(prevState))\r\n                    newState.splice(plotsindex,1)\r\n                    for(let i=plotsindex; i<newState.length; i++){\r\n                        //update timers from live plots that have greater indexes than this one\r\n                        if(newState[i].configObject.livePlot){\r\n                            let timerId = setInterval( \r\n                                () => {\r\n                                    handleLivePlotData(newState[i].configObject,i,timerId)\r\n                                },1000)\r\n                            newState[i].configObject.liveDataAPIRequestFunctionTimer = timerId\r\n                        }\r\n                    }\r\n                    return newState\r\n                })\r\n    \r\n                return;\r\n            }\r\n        }\r\n        catch(err){\r\n            //if there was an error checking the variables, that means a plot with a index lower than the one from this function\r\n            //was removed. Thereby a new timed function was set and this one needs to be cleared\r\n            clearInterval(timerId);\r\n            return\r\n        }\r\n        \r\n        let queryParams = {\r\n            metricId: config.metricId,\r\n            dataType: config.dataType,\r\n            addPlansInfo: config.addPlansInfo\r\n        }\r\n\r\n        let currDate = new Date();\r\n        //subtract 60000 to value of currDate to get the timestamp 1 minute ago\r\n        let currDateMinus1Minute = new Date(currDate.getTime() - 60000)\r\n\r\n        queryParams.startDate = parseInt(currDateMinus1Minute.valueOf() / 1000)\r\n        queryParams.endDate = parseInt(currDate.valueOf() / 1000)\r\n\r\n        //get data to plot from API \r\n        let res = await ApiModule().getResourceData(config.resourceId, queryParams)\r\n\r\n        //access plansInfo data points\r\n        if(config.addPlansInfo){\r\n            res[0].listOfPlansInfo.forEach((item, index, array) => { \r\n                //set y coordinate of plans dataset points to the same value of the metrics dataset\r\n                item.value = res[0].listOfDataPoints.find(elem => elem.valueTime === item.valueTime).value\r\n            })\r\n        }\r\n\r\n        //update state variable to trigger render. The changes have to be made upon last state submitted that not might be \r\n        //rendered yet. That's why prevState is used to get last state even though it is not rendered\r\n        setUserPlotsConfigs( (prevState) => {\r\n            let newState = JSON.parse(JSON.stringify(prevState))\r\n            newState[plotsindex].plotData.dataSetMetric.data = res[0].listOfDataPoints\r\n            \r\n            if(config.addPlansInfo){\r\n                config.plansData = res[0].listOfPlansInfo\r\n            }\r\n\r\n            newState[plotsindex].configObject.startDate = currDateMinus1Minute\r\n            newState[plotsindex].configObject.endDate = currDate\r\n            return newState\r\n        })\r\n    }\r\n\r\n    async function removePlotConfigHandler(ev, atts){\r\n        setUserPlotsConfigs((prevState) => {\r\n            let newState = JSON.parse(JSON.stringify(prevState))\r\n            newState[atts.plotindex].removed = false;\r\n            return newState\r\n        })\r\n\r\n        let resStatus = await ApiModule().deletePlotConfig(userPlotsConfigs[atts.plotindex].plotConfigId)\r\n\r\n        //if res is successful update \r\n        if(resStatus === 200){\r\n            if(userPlotsConfigs[atts.plotindex].configObject.livePlot === false){\r\n                setUserPlotsConfigs((prevState) => {\r\n                    let newState = JSON.parse(JSON.stringify(prevState))\r\n                    newState.splice(atts.plotindex,1)\r\n                    for(let i=atts.plotindex; i<newState.length; i++){\r\n                        if(newState[i].configObject.livePlot){\r\n                            let timerId = setInterval( \r\n                                () => {\r\n                                    handleLivePlotData(newState[i].configObject,i,timerId)\r\n                                },1000)\r\n                            newState[i].configObject.liveDataAPIRequestFunctionTimer = timerId\r\n                        }\r\n                    }\r\n                    return newState\r\n                })\r\n            }\r\n            else{\r\n                setUserPlotsConfigs((prevState) => {\r\n                    let newState = JSON.parse(JSON.stringify(prevState))\r\n                    newState[atts.plotindex].removed = true;\r\n                    return newState\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    function generatePlots(row, plotIndex){\r\n        let columnsToReturn = [];\r\n        for(let i = 0; i<2 && plotIndex <= userPlotsConfigs.length; i++){\r\n            columnsToReturn.push(\r\n                <Grid.Column key={i}>\r\n                    <Segment>\r\n                    {plotIndex < userPlotsConfigs.length ?\r\n                        <div>\r\n                        {\"replace\" in userPlotsConfigs[plotIndex] ?\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Input label=\"Insert new plot configuration name:\"\r\n                                    onChange={onPlotConfigNameChangeHandler}\r\n                                    plotindex={plotIndex}\r\n                                    error={\r\n                                    formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(userPlotsConfigs[plotIndex].plotConfigName) ?\r\n                                        { content: 'Please insert a name for the plot configuration', pointing: 'above' } \r\n                                    : \r\n                                        null\r\n                                    }\r\n                                    />\r\n                                    <Form.Button plotindex={plotIndex} onClick={replacePlotConfigHandler}>\r\n                                        Replace\r\n                                    </Form.Button>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        :\r\n                        \"ready\" in userPlotsConfigs[plotIndex] ?\r\n                            <Form>\r\n                                <Form.Group>\r\n                                    <Form.Input label=\"Insert plot configuration name:\"\r\n                                    onChange={onPlotConfigNameChangeHandler}\r\n                                    plotindex={plotIndex}\r\n                                    error={\r\n                                    formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(userPlotsConfigs[plotIndex].plotConfigName) ?\r\n                                        { content: 'Please insert a name for the plot configuration', pointing: 'above' } \r\n                                    : \r\n                                        null\r\n                                    }\r\n                                    />\r\n                                </Form.Group>\r\n                                <div align=\"right\">\r\n                                    <Form.Button icon color='grey' plotindex={plotIndex} onClick={savePlotConfigHandler}>\r\n                                        <Icon name='save outline'/>\r\n                                        Save\r\n                                    </Form.Button>\r\n                                </div>\r\n                            </Form>\r\n                        :\r\n                        \"plotData\" in userPlotsConfigs[plotIndex] ?\r\n                            <div>\r\n                                {\"removed\" in userPlotsConfigs[plotIndex] ?\r\n                                <Icon\r\n                                    style={\r\n                                        {\r\n                                            position: \"absolute\", \r\n                                            top: \"-23px\", right: \"-29px\",  \r\n                                            fontSize: \"3rem\",\r\n                                            background: \"white\"\r\n                                        }\r\n                                    }\r\n                                    loading\r\n                                    name='circle notch' color='red'\r\n                                />\r\n                                :\r\n                                <Icon \r\n                                    plotindex={plotIndex}\r\n                                    style={\r\n                                        {\r\n                                            position: \"absolute\", \r\n                                            top: \"-12px\", right: \"-21px\", \r\n                                            background: \"white\", \r\n                                            fontSize: \"3rem\",\r\n                                            cursor: \"pointer\",\r\n                                            height: \"0.5em\",\r\n                                            width: \"0.9em\"\r\n                                        }\r\n                                    }\r\n                                    name='remove circle' color='red'\r\n                                    onClick={removePlotConfigHandler}\r\n                                />\r\n                                }\r\n                                <Header as=\"h3\" textAlign=\"center\"> \r\n                                    {userPlotsConfigs[plotIndex].plotConfigName}\r\n                                </Header>\r\n                                <Divider/>\r\n                                    <Plot \r\n                                        plotPath=\"\"\r\n                                        plotData = {userPlotsConfigs[plotIndex].plotData}\r\n                                        startDate={\r\n                                            typeof(userPlotsConfigs[plotIndex].configObject.startDate) === \"object\" ?\r\n                                                userPlotsConfigs[plotIndex].configObject.startDate\r\n                                            :\r\n                                            typeof(userPlotsConfigs[plotIndex].configObject.startDate) === \"string\" ?\r\n                                                new Date(userPlotsConfigs[plotIndex].configObject.startDate)\r\n                                            :\r\n                                                new Date(userPlotsConfigs[plotIndex].configObject.startDate * 1000)\r\n                                        } \r\n                                        endDate={\r\n                                            typeof(userPlotsConfigs[plotIndex].configObject.endDate) === \"object\" ?\r\n                                                userPlotsConfigs[plotIndex].configObject.endDate\r\n                                            :\r\n                                            typeof(userPlotsConfigs[plotIndex].configObject.endDate) === \"string\" ?\r\n                                                new Date(userPlotsConfigs[plotIndex].configObject.endDate)\r\n                                            :\r\n                                                new Date(userPlotsConfigs[plotIndex].configObject.endDate * 1000)\r\n                                        } \r\n                                    />\r\n                                <Divider/>\r\n                                <Label color='blue'  style={{cursor: \"pointer\",float: \"right\", marginTop: \"-5px\"}} as=\"label\" size=\"large\">\r\n                                    <Icon name='exchange' />\r\n                                    <input type=\"file\" style={{display: \"none\"}} \r\n                                        plotindex={plotIndex} onChange={replaceConfigHandler}\r\n                                    />\r\n                                    Replace Configuration\r\n                                </Label>\r\n                                <br/>\r\n                            </div>\r\n                        :\r\n                            <Loader active inline='centered'> Retrieving plot data... </Loader>\r\n                        }\r\n                        </div>\r\n                        :\r\n                        <Label color='blue' style={{cursor: \"pointer\"}} as=\"label\" size=\"big\">\r\n                                <Icon name='add' />\r\n                                <input type=\"file\" style={{display: \"none\"}} onChange={readPlotConfigHandler}></input>\r\n                                Plot Configuration\r\n                        </Label>\r\n                    }\r\n                    </Segment>\r\n                </Grid.Column>\r\n            )\r\n            plotIndex++\r\n        }\r\n        return columnsToReturn\r\n    }\r\n\r\n    function generateRows(){\r\n        let rowsToReturn = [];\r\n        let plotIndex = 0;\r\n        for(let i =0; i<3 && plotIndex <= userPlotsConfigs.length; i++){\r\n            rowsToReturn.push(\r\n                <Grid.Row key={i}>\r\n                    {generatePlots(i,plotIndex)}\r\n                </Grid.Row>\r\n            )\r\n            plotIndex += 2\r\n        }\r\n\r\n        return rowsToReturn\r\n    }\r\n\r\n    return( \r\n        <div>\r\n            <Grid centered>\r\n                <Grid.Row >\r\n                    <Grid.Column width={15}>\r\n                        <Divider  section horizontal>\r\n                            <Header as=\"h1\" textAlign=\"center\"> Imported Favourite Plots</Header> \r\n                        </Divider>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            { !userPlotsConfigsread ?\r\n                <Loader active inline='centered'> Retrieving plots configurations... </Loader>\r\n            :\r\n            \r\n                <Grid stackable padded columns={2}>\r\n                    {generateRows()}\r\n                </Grid>\r\n            }\r\n            <CustomModal \r\n                successPath=\"/\" \r\n                modalInfo={postResponseMessage} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","\r\nfunction ValidInputs(){\r\n    function validIntGreaterThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0]*[1-9][0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validIntGreaterOrEqualThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloatBetweenZeroAndOne(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"(^0((\\\\.?)|(\\\\.[0-9]*))$)|(^1((\\\\.?)|(\\\\.0*))$)\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloat(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+(\\\\.?)[0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validStringOrDropDownSelection(value){\r\n        //It just needs to exist and not be empty\r\n        if(value === undefined || value === null || value === \"\"){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validDropDownMultipleSelection(value){\r\n        //Value is an array and thereby must not be empty\r\n        if(value.length === 0){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validTimeStamp(value){\r\n        if(value === null)\r\n            return false\r\n        //Value is a input of type \"datetime-local\"\r\n        let dateAndTime = value.split(\"T\");\r\n        if(dateAndTime.length === 2){\r\n            let dateSplited = dateAndTime[0].split(\"-\")\r\n            let timeSplited = dateAndTime[1].split(\":\")\r\n            //according to month verify if day is valid\r\n            let month = parseInt(dateSplited[1])\r\n            let day = parseInt(dateSplited[2])\r\n            if(month <= 7){\r\n                if(month % 2 === 0){\r\n                    if(month === 2){\r\n                        if(isLeapYear(parseInt(dateSplited[0]))){\r\n                            if(day > 29){\r\n                                return false\r\n                            }  \r\n                        }\r\n                        else{\r\n                            if(day > 28){\r\n                                return false\r\n                            }  \r\n                        }\r\n                    }\r\n                    else{\r\n                        if(day > 30){\r\n                            return false\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n            else{\r\n                if(month % 2 === 1){\r\n                    if(day > 30){\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            //verify time\r\n            if(timeSplited[2] > 59){ //verify seconds\r\n                return false\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    //leap year => 366 days\r\n    function isLeapYear(year){\r\n        if(year % 4 === 0){\r\n            if(year % 100 === 0){\r\n                if(year % 400 === 0){\r\n                    return true\r\n                }\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    return {validIntGreaterThanZero,validIntGreaterOrEqualThanZero,validFloatBetweenZeroAndOne,\r\n        validStringOrDropDownSelection,validFloat,validDropDownMultipleSelection, validTimeStamp}\r\n}\r\n\r\nexport default ValidInputs;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    //const API_IP_ADDRESS = \"10.3.3.119\"\r\n    const API_IP_ADDRESS = \"10.3.1.176\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}"],"names":["props","navigate","useNavigate","useState","successPath","openModal","messageType","message","modalState","setModalState","modalCloseHandler","ev","atts","modalInfo","useEffect","centered","closeIcon","open","onClose","color","onClick","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","plotPath","adaptedFontSizes","setAdaptedFontSizes","adaptedFontSizesRef","useRef","current","chartPDFGen","setChartPDFGen","chartRef","dataSetMetric","type","borderColor","backgroundColor","order","pointStyle","radius","hoverRadius","parsing","xAxisKey","yAxisKey","dataSetPlans","label","datasets","plotData","setPlotData","animation","duration","hover","animationDuration","responsiveAnimationDuration","maintainAspectRatio","responsive","plugins","legend","position","labels","usePointStyle","reverse","tooltip","callbacks","tooltipItem","datasetIndex","raw","planId","Math","round","value","scales","x","time","displayFormats","second","minute","hour","day","week","month","quarter","year","minUnit","tooltipFormat","title","display","text","font","family","weight","ticks","autoSkip","min","startDate","max","endDate","y","beginAtZero","ylabel","maxTicksLimit","onResize","currLocation","window","location","href","split","length","plotOptions","setPlotOptions","datasetsTemp","push","data","undefined","plansData","prevState","newState","JSON","parse","stringify","myplugins","beforeDraw","c","chartHeight","height","ticksFontSize","axisLabelFontSize","legendFontSize","newOptions","size","active","inline","floated","loading","imgFile","toBase64Image","doc","jsPDF","width","addImage","save","name","style","ref","console","log","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","options","userPlotsConfigs","setUserPlotsConfigs","userPlotsConfigsread","setUserPlotsConfigsread","plotConfigsRef","formErrorDisplay","setFormErrorDisplay","postResponseMessage","setPostResponseMessage","readPlotConfigHandler","fr","FileReader","addEventListener","event","newPlotConfig","target","result","ready","newUserPlotsConfigs","readAsText","files","replaceConfigHandler","index","parseInt","currentTarget","getAttribute","newConfigObject","configObject","replace","onPlotConfigNameChangeHandler","plotindex","plotConfigName","savePlotConfigHandler","ValidInputs","validStringOrDropDownSelection","configObjectTemp","plotConfigTemp","requestBody","Blob","arrayBuffer","Array","from","Uint8Array","ApiModule","savePlotConfig","res","status","plotConfigId","handlePlotData","replacePlotConfigHandler","replacePlotConfig","config","plotsindex","queryParams","metricId","dataType","addPlansInfo","livePlot","currDate","Date","currDateMinus1Minute","getTime","valueOf","getResourceData","resourceId","metricLabel","listOfDataPoints","newPlotData","descriptionInfo","listOfPlansInfo","forEach","item","array","find","elem","valueTime","timerId","setInterval","handleLivePlotData","liveDataAPIRequestFunctionTimer","clearInterval","removed","splice","i","removePlotConfigHandler","deletePlotConfig","generatePlots","row","plotIndex","columnsToReturn","onChange","error","content","pointing","align","icon","top","right","fontSize","background","cursor","as","textAlign","float","marginTop","getPlotsConfigs","plotsConfigs","Buffer","makeAPIRequest","section","horizontal","stackable","padded","columns","rowsToReturn","generateRows","validIntGreaterThanZero","RegExp","test","validIntGreaterOrEqualThanZero","validFloatBetweenZeroAndOne","validFloat","validDropDownMultipleSelection","validTimeStamp","dateAndTime","dateSplited","timeSplited","isLeapYear","apiURL","getMetrics","axios","params","then","catch","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getSimulationData","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule"],"sourceRoot":""}