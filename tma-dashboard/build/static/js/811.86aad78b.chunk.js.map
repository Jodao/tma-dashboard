{"version":3,"file":"static/js/811.86aad78b.chunk.js","mappings":"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","sources":["components/CustomModal.js","components/Plot.js","components/tables/TableHeader.js","pages/Resources/SimulateResourceMetricsPage.js","utils/ValidInputs.js","utils/api/ApiModule.js","configurations/Configurations.js","utils/treeRendering/TreeLabel.js","utils/treeRendering/TreeRender.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Button, Modal, Message} from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CustomModal(props){\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const [modalState, setModalState] = useState(\r\n        {\r\n            successPath: props.successPath,\r\n            openModal: false,\r\n            messageType: null,\r\n            message: null\r\n        }\r\n    )  \r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(modalState.messageType === \"success\"){\r\n            navigate(modalState.successPath)\r\n        }\r\n        props.modalInfo.openModal = false\r\n        setModalState(\r\n            {\r\n                ...modalState,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setModalState({\r\n            ...modalState,\r\n            openModal: props.modalInfo.openModal,\r\n            messageType: props.modalInfo.messageType,\r\n            message: props.modalInfo.message\r\n        })\r\n    },[props])\r\n\r\n    return(\r\n        <Modal centered={false} closeIcon open={modalState[\"openModal\"]} onClose={modalCloseHandler}>\r\n            <Modal.Header>Message</Modal.Header>\r\n            <Modal.Content>\r\n                <Message \r\n                color= {\r\n                        modalState[\"messageType\"] === \"success\" ? \r\n                        \"green\"\r\n                        :modalState[\"messageType\"] === \"warning\" ?\r\n                        \"orange\"\r\n                        : \"red\" \r\n                    }\r\n                >\r\n                    <Message.Header>{modalState[\"message\"]}</Message.Header>\r\n                </Message>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='grey' onClick={modalCloseHandler}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CustomModal;","import React, { useEffect, useState } from 'react';\r\nimport {\r\nChart as ChartJS,\r\nCategoryScale,\r\nLinearScale,\r\nPointElement,\r\nLineElement,\r\nTitle,\r\nTooltip,\r\nLegend,\r\nTimeScale,\r\n} from 'chart.js';\r\nimport {Chart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent} from 'react-chartjs-2';\r\nimport {Loader, Button, Icon} from 'semantic-ui-react';\r\nimport { useRef } from 'react';\r\nimport html2canvas from \"html2canvas\";\r\nimport jsPDF from 'jspdf';\r\nimport 'date-fns';\r\n\r\nfunction Plot(props){\r\n    \r\n    ChartJS.register(\r\n        CategoryScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend,\r\n        TimeScale,\r\n    );\r\n\r\n    const plotPath = props.plotPath;\r\n\r\n    //used to control the display of the chart after font sizes have been changed/adapted\r\n    const[adaptedFontSizes,setAdaptedFontSizes]  = useState(false);\r\n    const adaptedFontSizesRef = useRef(adaptedFontSizes);\r\n    adaptedFontSizesRef.current = adaptedFontSizes\r\n\r\n    //used to show a loading state on the button that generates a PDF Image from the chart\r\n    const [chartPDFGen,setChartPDFGen] = useState(false);\r\n    \r\n    const chartRef = useRef();\r\n\r\n    //raw or metric data points dataset\r\n    let dataSetMetric = {\r\n        //\"label\" and \"data\" properties missing from input\r\n        type: \"line\",\r\n        borderColor: '#007bff',\r\n        backgroundColor: '#007bff',\r\n        order: 2,\r\n        pointStyle: \"circle\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    //plans dataset\r\n    let dataSetPlans = {\r\n        //\"data\" property missing from input\r\n        label: 'Adaptation Plans',\r\n        type: \"scatter\",\r\n        borderColor: 'black',\r\n        backgroundColor: 'white',\r\n        pointStyle: \"rectRot\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        order: 1,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    // \"datasets\" is an array of dataset objects where each object holds its properties and the y and x axis values.  \r\n    const [plotData,setPlotData] = useState(\r\n        {\r\n            datasets: []    \r\n        }\r\n    )\r\n\r\n    //function that handles what information is shown on the plot for a point that is hovered by the user\r\n    function plotLabelHandler(tooltipItem){\r\n        let label\r\n        //if datasetIndex is 1, then it is the dataset relative to Plans\r\n        if(tooltipItem.datasetIndex === 1){\r\n            label = \"Plan Id: \" + tooltipItem.raw.planId\r\n        }\r\n        else{\r\n            //round the value to 3 decimal places\r\n            label = \"Value: \" + Math.round(tooltipItem.raw.value * 1000) / 1000; \r\n        }\r\n        \r\n        return label;\r\n    }\r\n\r\n    const [plotOptions,setPlotOptions] = useState(\r\n        {\r\n            animation: {\r\n                duration: 0\r\n            },\r\n            hover: {\r\n                animationDuration: 0,\r\n            },\r\n            responsiveAnimationDuration: 0,\r\n            maintainAspectRatio: true,\r\n            responsive: true,\r\n            plugins: {\r\n                legend: {\r\n                    position: 'top',\r\n                    labels: {\r\n                        usePointStyle: true,\r\n                    },\r\n                    reverse: true\r\n                },\r\n                /* //In case it is wanted to show a title for the Chart\r\n                title: {\r\n                    display: true,\r\n                    text: 'Chart.js Line Chart',\r\n                },*/\r\n                tooltip: {\r\n                    usePointStyle: true,\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                    callbacks: {\r\n                        label: plotLabelHandler\r\n                    },\r\n                }\r\n            },\r\n            scales:{\r\n                x: {\r\n                    //this will make values received from api, which are in epoch millisecond, to be converted into the local timezone\r\n                    //and formated into the specified formats\r\n                    type: 'time',\r\n                    parsing: 'false',\r\n                    time: {\r\n                        displayFormats:{\r\n                            second: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            minute: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            hour: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            day: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            week: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            month: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            quarter: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            year: \"dd/MM/yyyy, HH:mm:ss\",\r\n                        },\r\n                        minUnit: \"second\",\r\n                        tooltipFormat:\"dd/MM/yyyy, HH:mm:ss\",\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: \"TimeStamp (dd/MM/yyyy, HH:mm:ss)\",\r\n                        color: '#0057b3',\r\n                        font: {\r\n                            family: 'Times New Roman',\r\n                            weight: 'bold',\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        font: {\r\n                        },\r\n                        color: \"#000000\",\r\n                        autoSkip: true,\r\n                    },\r\n                    min: props.startDate,\r\n                    max: props.endDate,\r\n                },\r\n                y: {\r\n                    beginAtZero: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: props.plotData.ylabel,\r\n                        color: '#0057b3',\r\n                        font: {\r\n                            family: 'Times New Roman',\r\n                            weight: 'bold',\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        maxTicksLimit: 20,\r\n                        font: {\r\n                        },\r\n                        color: \"#000000\"\r\n                    },\r\n                } \r\n            },\r\n            onResize: resetFontVariables\r\n        }\r\n    )\r\n\r\n    //this is done to readapt font sizes in case of a resize of the page\r\n    function resetFontVariables(){\r\n        let currLocation = window.location.href.split(\"/\")\r\n        if(currLocation[currLocation.length-1] !== plotPath){\r\n           return\r\n        }\r\n        setAdaptedFontSizes(false)\r\n    }\r\n\r\n    function chartClickHandler(ev){\r\n        console.log(getDatasetAtEvent(chartRef.current, ev));\r\n        console.log(getElementAtEvent(chartRef.current, ev));\r\n        console.log(getElementsAtEvent(chartRef.current, ev));\r\n    }\r\n\r\n    useEffect(() => {\r\n        let datasetsTemp = []\r\n        datasetsTemp.push(\r\n            {\r\n                ...dataSetMetric,\r\n                label: props.plotData.dataSetMetric.label,\r\n                data: props.plotData.dataSetMetric.data\r\n            }\r\n        )\r\n        if(props.plotData.plansData !== undefined){\r\n            datasetsTemp.push(\r\n                {\r\n                    ...dataSetPlans,\r\n                    data: props.plotData.plansData\r\n                }\r\n            )\r\n        }\r\n        setPlotData(\r\n            {\r\n                ...plotData,\r\n                datasets: datasetsTemp\r\n            }\r\n        )\r\n    },[props])\r\n\r\n    useEffect(() => {\r\n        setPlotOptions((prevState) => {\r\n            let newState = JSON.parse(JSON.stringify(prevState))\r\n            newState.scales.x.min = props.startDate\r\n            newState.scales.x.max = props.endDate\r\n            //the next lines are needed because json way to copy one object into another doesn't support types beyond\r\n            //primitives(string,number...). In this case, onResize and label are functions\r\n            newState.onResize = prevState.onResize\r\n            newState.plugins.tooltip.callbacks.label = prevState.plugins.tooltip.callbacks.label\r\n            return newState\r\n        })\r\n    },[props.startDate])\r\n\r\n    const myplugins = [{\r\n        /* Adjust font sizes according to chart size */\r\n        beforeDraw: function(c) {\r\n            if(!adaptedFontSizesRef.current){\r\n                var chartHeight = c.height\r\n                var ticksFontSize = chartHeight * 3 / 100\r\n                var axisLabelFontSize = chartHeight * 5 / 100\r\n                var legendFontSize = chartHeight * 3.5 / 100\r\n\r\n                setPlotOptions((prevState)=>{\r\n                    let newOptions = JSON.parse(JSON.stringify(prevState))\r\n                    newOptions.scales.x.ticks.font.size = ticksFontSize\r\n                    newOptions.scales.y.ticks.font.size = ticksFontSize\r\n\r\n                    newOptions.scales.x.title.font.size = axisLabelFontSize\r\n                    newOptions.scales.y.title.font.size = axisLabelFontSize\r\n\r\n                    newOptions.plugins.legend.labels.font = {size: legendFontSize}\r\n                    //the next lines are needed because json way to copy one object into another doesn't support types beyond\r\n                    //primitives(string,number...). In this case, onResize and label are functions\r\n                    newOptions.onResize = prevState.onResize\r\n                    newOptions.plugins.tooltip.callbacks.label = prevState.plugins.tooltip.callbacks.label\r\n                    return newOptions\r\n                })\r\n                setAdaptedFontSizes(true)\r\n\r\n            }\r\n        }\r\n            \r\n    }]\r\n\r\n    return(\r\n        plotData.datasets.length === 0 ?\r\n            <Loader active inline='centered'> Preparing chart </Loader>\r\n        :    \r\n            <div>\r\n                <Button color=\"grey\"\r\n                    floated='right'\r\n                    loading = {chartPDFGen}\r\n                    onClick={ () => {\r\n                        setChartPDFGen(true)\r\n                        \r\n                        let imgFile = chartRef.current.toBase64Image(\"image/png\",1);\r\n                        let doc = new jsPDF('landscape',\"px\",[chartRef.current.width,chartRef.current.height]);\r\n                        doc.addImage(imgFile, \"PNG\", 0, 0,chartRef.current.width, chartRef.current.height);\r\n                        doc.save('Plot.pdf');\r\n                        setChartPDFGen((prevState) => {return !prevState})\r\n\r\n                        /*let canvasElem = chartRef.current.canvas;\r\n                        //html2canvas used to improve quality. scale of 5 increases resolution in 5x\r\n                        html2canvas(canvasElem, {scale: 3}).then((canvas) => {\r\n                            let imgFile = canvas.toDataURL(\"image/png\", 1);\r\n                            let doc = new jsPDF('landscape',\"px\",[canvas.width,canvas.height],true,true);\r\n                            doc.addImage(imgFile, \"PNG\", 0, 0, canvas.width,canvas.height);\r\n                            doc.save('Plot.pdf');\r\n                            setChartPDFGen((prevState) => {return !prevState})\r\n                        })*/\r\n                    }}\r\n                >\r\n                    <Icon name='download' />\r\n                    Download Chart\r\n                </Button>\r\n                <div style={{position: \"relative\", width: \"100%\", height: \"100%\", display:\"flex\"}}>\r\n                    <Chart ref={chartRef} onClick={chartClickHandler} options={plotOptions} data={plotData} \r\n                        plugins={adaptedFontSizes? null: myplugins}\r\n                        style={{display: adaptedFontSizes? \"block\" : \"none\"}}\r\n                    />\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Plot;","import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import { Divider, Label, Header, Grid, Form, Container, Segment,Table, Loader} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport React, {useState, useEffect, useRef} from \"react\"\r\nimport {useLocation} from \"react-router-dom\"\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\nimport ValidInputs from '../../utils/ValidInputs';\r\nimport Plot from '../../components/Plot';\r\nimport CustomModal from '../../components/CustomModal';\r\n\r\nfunction SimulateResourceMetricsPage(){\r\n    const tableHeaders = [\r\n        \"metricName\", \r\n        <p>Original weight</p>,\r\n        <p>Simulation weight<font color='#990000'>*</font></p>\r\n    ]\r\n\r\n    //used to disable the appearence of errors when a 1st submission of the form hasn't been done\r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n\r\n    //holds message from API response to request and any other messages to be presented to the user\r\n    const [serverResponseMessage, setServerResponseMessage] = useState({\"openModal\": false})\r\n\r\n    //reads data from previous page\r\n    const data = useLocation()[\"state\"]\r\n\r\n    //used to update plot according to simulation\r\n    const [plotData,setPlotData] = useState(data.plotData);\r\n\r\n    //ref for the metric tree representation, so updates can be performed during form filling\r\n    const metricsTreeRef = useRef();\r\n\r\n    const [loadingSimulationData,setLoadingSimulationData] = useState(false);\r\n\r\n    const [metricsList,setMetricsList] = useState(null);\r\n    const [originalPreferences,setOriginalPreferences] = useState(null);\r\n    const [simulationPreferences, setSimulationPreferences] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        console.log(data)\r\n\r\n        let listOfMetrics = []\r\n        let listOfMetricsIds = []\r\n        getMetricsList(data.metricToSimulate, listOfMetrics,listOfMetricsIds);\r\n        setMetricsList(listOfMetrics) \r\n\r\n        //As preferences passed from previous page may contain preferences of other metrics that are not needed\r\n        //in the simulation, filter for the ones strictly necessary which must match the ones present in the listOfMetricsIds array \r\n        let originalPreferencesTemp = [] \r\n        let simulationPreferencesTemp = {}\r\n\r\n        listOfMetricsIds.forEach((item) => {\r\n            let weight = data.preferences.find(preference => preference.metricId === item).weight\r\n            originalPreferencesTemp.push(\r\n                {\r\n                    \"metricId\": item,\r\n                    \"weight\": weight\r\n                }\r\n            )\r\n            //Now create simulation preferences object with metricId as key and weight as value to use as request for API and\r\n            //rendering purposes. As a starting point also set the simulation preferences with the same values as the originals \r\n            simulationPreferencesTemp[item] = weight\r\n        })\r\n\r\n        setOriginalPreferences(originalPreferencesTemp)\r\n        setSimulationPreferences(simulationPreferencesTemp)\r\n\r\n    },[])\r\n\r\n    //from tree of metrics, find all the metric nodes and their names and ids, to later construct the form\r\n    function getMetricsList(metric, listOfMetrics, listOfMetricsIds){\r\n        listOfMetrics.push(\r\n            {\r\n                \"metricName\": metric[\"metricName\"],\r\n                \"metricId\": metric[\"metricId\"]\r\n            })\r\n        listOfMetricsIds.push(metric[\"metricId\"])    \r\n        for(let child of metric[\"childMetrics\"]){\r\n            getMetricsList(child,listOfMetrics, listOfMetricsIds)\r\n        }\r\n    }\r\n\r\n\r\n    function generateCustomTableBody(){\r\n        let uniqueId = -4;\r\n        return (\r\n            <Table.Body>\r\n                {\r\n                    metricsList.map((metric) => \r\n                        {\r\n                            uniqueId = uniqueId+4\r\n                            return generateCustomTableRow(metric,uniqueId); \r\n                        }\r\n                    )\r\n                }\r\n            </Table.Body>\r\n        )\r\n    }\r\n\r\n    function generateCustomTableRow(metric,uniqueId){\r\n        return(\r\n            <Table.Row key={uniqueId++}>\r\n                <Table.Cell key={uniqueId++}>\r\n                    {metric[\"metricName\"]}\r\n                </Table.Cell>\r\n                <Table.Cell key={uniqueId++}>\r\n                    {originalPreferences.find(item => item.metricId === metric.metricId).weight}\r\n                </Table.Cell>\r\n                <Table.Cell key={uniqueId++}>\r\n                    <Form.Input name=\"weight\" metricid={metric[\"metricId\"]} \r\n                    onChange={weightInputChangeHandler} required \r\n                    defaultValue={simulationPreferences[metric.metricId]}\r\n                    error={\r\n                        formErrorDisplay && !ValidInputs().validFloatBetweenZeroAndOne(simulationPreferences[metric.metricId]) ?\r\n                        { content: 'Please enter a float number where  0.0 <= number <= 1.0', pointing: 'above' }\r\n                        :\r\n                        null\r\n                    }\r\n                    />\r\n                </Table.Cell>\r\n            </Table.Row>\r\n        )\r\n    }\r\n\r\n    async function weightInputChangeHandler(ev,atts){   \r\n        let newSimulationPreferences = {...simulationPreferences}\r\n        newSimulationPreferences[atts[\"metricid\"]] = atts[\"value\"]\r\n        setSimulationPreferences(newSimulationPreferences)\r\n        metricsTreeRef.current.updateWeightsHandler(atts[\"metricid\"], atts[\"value\"])\r\n    }\r\n    \r\n    //used to validate that childs of a parent metric have a sum of weights = 1\r\n    function validWeightsSum(parentMetric){\r\n        //reached a leaf metric\r\n        if(parentMetric.childMetrics.length === 0){\r\n            return true\r\n        }\r\n        else{\r\n            let sum = 0\r\n            for(let child of parentMetric.childMetrics){\r\n                if(!validWeightsSum(child))\r\n                    return false\r\n                sum += parseFloat(simulationPreferences[child.metricId])\r\n            }\r\n            if(sum !== 1){\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n    }\r\n\r\n    async function submitHandler(ev){\r\n        ev.preventDefault()\r\n        let valid = true\r\n        \r\n        for(let metricWeight of Object.values(simulationPreferences)){\r\n            if(!ValidInputs().validFloatBetweenZeroAndOne(metricWeight)){\r\n                valid=false\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(valid){\r\n            setFormErrorDisplay(false)\r\n\r\n            //then it is not valid and customize message\r\n            if(!validWeightsSum(data.metricToSimulate)){\r\n                setServerResponseMessage(\r\n                    {\r\n                        messageType: \"error\",\r\n                        message: \"Sibling metrics must have the sum of their weights equal to 1. Please, rectify the weights.\",\r\n                        openModal: true\r\n                    }\r\n                )\r\n                return\r\n            }\r\n\r\n            setLoadingSimulationData(true)\r\n            \r\n            //process data into a format acceptable by the API\r\n            let requestBody = {\r\n                resourceId: data.resourceId,\r\n                metricToSimulate: data.metricToSimulate,\r\n                preferences: simulationPreferences\r\n            }\r\n\r\n            //send dates in UTC seconds and mind if the values passed were from live plot or not. If received from live plot\r\n            //they are already date objects.\r\n            if(typeof(data.startDate) === \"object\"){\r\n                requestBody.startDate = parseInt(data.startDate.valueOf()/1000)\r\n                requestBody.endDate = parseInt(data.endDate.valueOf()/1000)\r\n            }\r\n            else{\r\n                requestBody.startDate = new Date(data.startDate).valueOf()/1000\r\n                requestBody.endDate = new Date(data.endDate).valueOf()/1000\r\n            }\r\n\r\n            let resData = await ApiModule().getSimulationData(requestBody)\r\n            \r\n            let newPlotData = JSON.parse(JSON.stringify(plotData))\r\n            newPlotData.dataSetMetric.data = resData\r\n            setPlotData(newPlotData)\r\n            \r\n            setLoadingSimulationData(false);\r\n        }\r\n        else{\r\n            setFormErrorDisplay(true)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\">Simulate Resource Metrics </Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            {simulationPreferences === null ?\r\n                <Loader active inline='centered'> Processing data... Please Wait</Loader>\r\n            :\r\n                <Container >\r\n                    <Segment>\r\n                        <Label ribbon as='b' color=\"grey\">\r\n                            <Header as=\"h3\"> Note: </Header> \r\n                            Scroll down to visualize the Plot area.\r\n                        </Label>\r\n                        <br/>\r\n                        <br/>\r\n                        <Grid stackable columns={2}>\r\n                            <Grid.Column>\r\n                                <Segment >\r\n                                    <Header as=\"h3\" textAlign=\"center\"> Simulation Information</Header>\r\n                                    <Form>\r\n                                        <Form.Group widths=\"equal\">\r\n                                            <Form.Field>\r\n                                                <label>Metric to simulate:</label>\r\n                                                {data.metricToSimulate.metricName}\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Start timestamp:</label>\r\n                                                {typeof(data.startDate) === \"object\" ?\r\n                                                    data.startDate.toLocaleString()\r\n                                                :\r\n                                                    new Date(data.startDate).toLocaleString()\r\n                                                }\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>End timestamp:</label>\r\n                                                {typeof(data.endDate) === \"object\" ?\r\n                                                    data.endDate.toLocaleString()\r\n                                                :\r\n                                                    new Date(data.endDate).toLocaleString()\r\n                                                }\r\n                                            </Form.Field>\r\n                                            <Form.Field >\r\n                                                <label>Resource Id:</label>\r\n                                                {data.resourceId}\r\n                                            </Form.Field>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                    <Divider section horizontal>\r\n                                        <Header as=\"h5\" textAlign=\"center\">Simulation weighted metrics tree</Header>     \r\n                                    </Divider>\r\n                                    <TreeRender ref={metricsTreeRef} width={\"100%\"} height={\"50vh\"} \r\n                                        data={data.metricToSimulate} \r\n                                        preferences={originalPreferences} \r\n                                        configurationProfile={true}\r\n                                    />\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                            <Grid.Column> \r\n                                <Form>\r\n                                <Segment>\r\n                                    <Header as=\"h3\" textAlign=\"center\"> Simulation weights</Header>\r\n                                        <Form.Group grouped>\r\n                                            <Table  \r\n                                            style = {{marginLeft: \"auto\", marginRight: \"auto\"}} \r\n                                            textAlign=\"center\" \r\n                                            compact \r\n                                            collapsing  \r\n                                            celled \r\n                                            selectable> \r\n                                                <TableHeader tableHeaders = {tableHeaders} ></TableHeader>\r\n                                                {generateCustomTableBody()}\r\n                                            </Table>   \r\n                                        </Form.Group>\r\n                                        <Form.Button loading={loadingSimulationData} color= \"blue\" circular \r\n                                            type='submit' floated=\"right\" onClick={submitHandler}\r\n                                        > \r\n                                            Simulate\r\n                                        </Form.Button> \r\n                                        <br/>\r\n                                        <br/>\r\n                                </Segment> \r\n                                </Form>\r\n                            </Grid.Column>          \r\n                        </Grid>\r\n                        <Segment>\r\n                        {loadingSimulationData ?\r\n                            <Loader active inline='centered'> Performing simulation... Please Wait  </Loader>\r\n                        :\r\n                            null \r\n                        }\r\n                        <div style={{display: loadingSimulationData? \"none\":\"block\"}}>\r\n                            <Plot \r\n                                plotPath=\"simulateMetrics\" plotData={plotData}\r\n                                startDate={\r\n                                    typeof(data.startDate) === \"object\" ?\r\n                                        data.startDate\r\n                                    :\r\n                                        new Date(data.startDate * 1000)\r\n                                } \r\n                                endDate={\r\n                                    typeof(data.endDate) === \"object\" ?\r\n                                        data.endDate\r\n                                    :\r\n                                        new Date(data.endDate * 1000)\r\n                                } \r\n                            />\r\n                        </div>\r\n                        </Segment>\r\n                    </Segment>\r\n                </Container>\r\n            }\r\n            <CustomModal \r\n                successPath={\"simulateMetrics\"}\r\n                modalInfo={serverResponseMessage} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SimulateResourceMetricsPage;","\r\nfunction ValidInputs(){\r\n    function validIntGreaterThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0]*[1-9][0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validIntGreaterOrEqualThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloatBetweenZeroAndOne(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"(^0((\\\\.?)|(\\\\.[0-9]*))$)|(^1((\\\\.?)|(\\\\.0*))$)\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloat(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+(\\\\.?)[0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validStringOrDropDownSelection(value){\r\n        //It just needs to exist and not be empty\r\n        if(value === undefined || value === null || value === \"\"){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validDropDownMultipleSelection(value){\r\n        //Value is an array and thereby must not be empty\r\n        if(value.length === 0){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validTimeStamp(value){\r\n        if(value === null)\r\n            return false\r\n        //Value is a input of type \"datetime-local\"\r\n        let dateAndTime = value.split(\"T\");\r\n        if(dateAndTime.length === 2){\r\n            let dateSplited = dateAndTime[0].split(\"-\")\r\n            let timeSplited = dateAndTime[1].split(\":\")\r\n            //according to month verify if day is valid\r\n            let month = parseInt(dateSplited[1])\r\n            let day = parseInt(dateSplited[2])\r\n            if(month <= 7){\r\n                if(month % 2 === 0){\r\n                    if(month === 2){\r\n                        if(isLeapYear(parseInt(dateSplited[0]))){\r\n                            if(day > 29){\r\n                                return false\r\n                            }  \r\n                        }\r\n                        else{\r\n                            if(day > 28){\r\n                                return false\r\n                            }  \r\n                        }\r\n                    }\r\n                    else{\r\n                        if(day > 30){\r\n                            return false\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n            else{\r\n                if(month % 2 === 1){\r\n                    if(day > 30){\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            //verify time\r\n            if(timeSplited[2] > 59){ //verify seconds\r\n                return false\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    //leap year => 366 days\r\n    function isLeapYear(year){\r\n        if(year % 4 === 0){\r\n            if(year % 100 === 0){\r\n                if(year % 400 === 0){\r\n                    return true\r\n                }\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    return {validIntGreaterThanZero,validIntGreaterOrEqualThanZero,validFloatBetweenZeroAndOne,\r\n        validStringOrDropDownSelection,validFloat,validDropDownMultipleSelection, validTimeStamp}\r\n}\r\n\r\nexport default ValidInputs;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    //const API_IP_ADDRESS = \"10.3.3.119\"\r\n    const API_IP_ADDRESS = \"10.3.1.176\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction TreeLabel(props){\r\n    const [extraLabelForNodes, setExtraLabelForNodes] = useState(\r\n            {\r\n                text: (props[\"text\"].toString().split(\"\\n\")[0])\r\n            }\r\n        )\r\n\r\n    useEffect(()=>{\r\n        //if this is a node's label, it might be needed to add an extra label to represent weights. Thereby, check if this is\r\n        // a node's label and then split received text by \"\\n\". If the size is > 1, it means it has an extra label to render.\r\n        //Then, save both texts, the original and the extra label. In the return statement add extra label if its set on the \r\n        //state variable\r\n        if(props.node === true){\r\n            let labelsText = props.text.split(\"\\n\")\r\n            let extraLabelForNodesTemp = JSON.parse(JSON.stringify(extraLabelForNodes))\r\n            extraLabelForNodesTemp.text = labelsText[0]\r\n            if(labelsText.length > 1){\r\n                extraLabelForNodesTemp.weightLabel = labelsText[1]\r\n            }\r\n            setExtraLabelForNodes(extraLabelForNodesTemp)\r\n        }    \r\n    },[props.text])\r\n    \r\n    //Default customization of <Canvas> tag from reaflow library generated graphically bad labels. The examples were followed and\r\n    //used for edge property => <Edge \r\n    //                    style={{ stroke: 'black', strokeWidth: 2 }}\r\n    //                    label={<Label style={{ fill: 'red', fontWeight: \"900\"}} />}\r\n    //                  />}\r\n    //Thereby html tags generated with the default configs were analyzed, and found out the node graphs were being \r\n    //generated with SVG. \r\n    //Next, props being passed to the label were analyzed to understand the way the library renders the graph. Found \r\n    //out 'transform=\"translate(x,y)\" was used to position the labels.\r\n    //All the information passed to the label is retrieved from the props, which are the 'x' and 'y' assigned positions \r\n    //for the label inside the canvas, and the 'text' which the label presents on the screen.\r\n    //Finally, used svg elements to customize the labels in a own way. \r\n    return props[\"node\"] === false ?\r\n        <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n            <circle fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" /> \r\n            <text textAnchor=\"middle\" dominantBaseline = \"middle\" fill=\"black\">{props.text}</text>   \r\n        </g>\r\n        : \r\n        (\r\n            <React.Fragment>\r\n                <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                    <text fill=\"black\">{extraLabelForNodes.text}</text>   \r\n                </g>\r\n                {\r\n                    extraLabelForNodes.weightLabel !== undefined && extraLabelForNodes.weightLabel !== \"\" ?\r\n                    <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                        <circle cx= {props.x + props.width} cy={props.y + 6*props.height} fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" />\r\n                        <text \r\n                            textAnchor=\"middle\"\r\n                            dominantBaseline = \"middle\"\r\n                            x={props.x + props.width} \r\n                            y={props.y + 6*props.height} \r\n                            fill=\"black\">\r\n                                {extraLabelForNodes.weightLabel}\r\n                        </text>      \r\n                    </g>\r\n                    :null\r\n                }               \r\n            </React.Fragment>\r\n        ) \r\n}\r\n\r\nexport default TreeLabel;","import { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Canvas, Edge, Node, Label } from 'reaflow';\r\nimport {Loader, Button, Icon} from \"semantic-ui-react\"\r\nimport TreeLabel from \"./TreeLabel\"\r\n\r\n\r\nfunction TreeRender (props,ref) {\r\n    const data = props[\"data\"];\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [treeReady,setTreeReady] = useState(false);\r\n    const canvasRef = useRef();\r\n    const canvasDivRef = useRef();\r\n\r\n    //If it is to render a configuration profile, show the weights\r\n    const configurationProfile = props[\"configurationProfile\"];\r\n    const preferences = props[\"preferences\"];\r\n    \r\n    //Use of auxiliar variables to hold nodes and edges information while that information is being retrieved\r\n    //Later, once all the information is retrieved, use state variables \"edges\" and \"nodes\" to render \r\n    var nodesaux = [];\r\n    var edgesaux = [];\r\n    \r\n    //function that allows formating received data into the format requested by reaflow (tree rendering library)\r\n    function processData(parent){\r\n\r\n      //add current node (which is the parent) to list of nodes\r\n      let nodeToAdd = {\r\n        id: parent[\"metricId\"].toString(),\r\n        text: parent[\"metricName\"]\r\n      }\r\n      nodesaux.push(nodeToAdd);\r\n\r\n      //iterate over each child of parent node, add edge information and recursively call this function \"processData\"\r\n      //for each child to repeat the process\r\n      for(let child of parent[\"childMetrics\"]){\r\n        let edgeToAdd = {\r\n          id: parent[\"metricId\"].toString() + child[\"metricId\"].toString(),\r\n          from: child[\"metricId\"].toString(),\r\n          to: parent[\"metricId\"].toString(),\r\n        }\r\n        if(configurationProfile){\r\n          edgeToAdd.text = preferences.find(preference => preference.metricId === child.metricId).weight;\r\n        }\r\n        edgesaux.push(edgeToAdd)\r\n        processData(child)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //Once the component is rendered, deal with the transformation of the format of the data received from the API \r\n        //into the format needed by the tree library \r\n        processData(data)\r\n        if(configurationProfile){\r\n          let rootNode = nodesaux.find(node => parseInt(node.id) === data.metricId)\r\n          rootNode.text = rootNode.text.split(\"\\n\")[0] + \"\\n\" + \r\n            preferences.find(preference => preference.metricId === parseInt(rootNode.id)).weight;\r\n        }\r\n        //use state to set and render processed nodes and edges information  \r\n        setNodes(nodesaux)\r\n        setEdges(edgesaux)\r\n        setTreeReady(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data]);\r\n\r\n    useEffect(() => {\r\n      //if the Tree has been rendered, the div is no longer undefined and thereby wheel event can be added\r\n      // to later allow CRTL + MOUSEWHEEl to zoom in/out on the canvas, if buttons aren't wished to be used\r\n      if(canvasDivRef.current !== undefined){\r\n        canvasDivRef.current.addEventListener('wheel', mouseWheelHandler,{passive:false});\r\n      }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[treeReady]);\r\n    \r\n    const zoomIn = () => {\r\n      canvasRef.current.zoomIn()\r\n    }\r\n\r\n    const zoomOut = () => {\r\n      canvasRef.current.zoomOut()\r\n    }\r\n\r\n    const fitCanvas = () => {\r\n      canvasRef.current.fitCanvas()\r\n    }\r\n\r\n    function mouseWheelHandler(event){\r\n      if(event.ctrlKey === true){\r\n        event.preventDefault();\r\n        //Wheel down\r\n        if(event.wheelDelta < 0) {\r\n            zoomOut()\r\n        }\r\n        //Wheel up\r\n        else {\r\n          zoomIn()\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWeightsHandler(metricIdToUpdateWeight,weightToApply){\r\n      let newEdges = JSON.parse(JSON.stringify(edges))\r\n      let foundEdge = false\r\n      for(let edgeInfo of newEdges){\r\n        if(edgeInfo.id.endsWith(metricIdToUpdateWeight)){\r\n          foundEdge = true\r\n          edgeInfo.text = weightToApply\r\n          setEdges(newEdges)\r\n          fitCanvas()\r\n          break;\r\n        }\r\n      }\r\n      //didn't found Edge, which means the weight its being applied on the root node. Thereby, add an extra label to\r\n      //show the node's weight assigned\r\n      if(!foundEdge){\r\n        //copy state variable and find the node to which the extra label will be added\r\n        let newNodes = JSON.parse(JSON.stringify(nodes))\r\n        let nodeRef = newNodes.find(node => parseInt(node.id) === metricIdToUpdateWeight)\r\n        //after finding the node split its display text by '\\n' and take the 1st word which is the original text. Then, add the\r\n        //text of the weight to show on the extra label. This split by '\\n' is needed as multiple changes would add multiple\r\n        //'\\n' to the text and that would render multiple extra labels\r\n        nodeRef.text = nodeRef.text.split(\"\\n\")[0] + \"\\n\" + weightToApply\r\n        setNodes(newNodes)\r\n      }\r\n    }\r\n\r\n    //Needed to expose tree update functions to outside components\r\n    useImperativeHandle(ref, () => ({\r\n      updateWeightsHandler\r\n    }));\r\n\r\n    //Followed the demos and docs of reaflow libray at https://reaflow.dev/?path=/story/docs-getting-started-components--page\r\n    return (\r\n      treeReady === true ?\r\n      <div>\r\n        <div>\r\n          <p style={{marginBottom:\"5px\"}} align=\"right\">\r\n            <Button icon color='blue' onClick={zoomIn}> \r\n              <Icon name='zoom-in'/>\r\n            </Button>\r\n            <Button icon color='blue' onClick={zoomOut}> \r\n              <Icon name='zoom-out'/>\r\n            </Button>\r\n          </p>\r\n        </div>  \r\n        <div ref={canvasDivRef}>\r\n          <Canvas\r\n              disabled={true}\r\n              arrow={null}\r\n              height={ props[\"height\"]}\r\n              width={ props[\"width\"]}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              readonly = {true}\r\n              animated = {false}\r\n              direction= \"UP\"\r\n              ref= {canvasRef}\r\n              fit = {true}\r\n              minZoom = {-0.9}\r\n              zoomable = {false}\r\n              node={\r\n                <Node\r\n                  style={{ stroke: 'black', fill: '#ffe6cc', strokeWidth: 3}}\r\n                  label={<TreeLabel node={true}/>}\r\n                />\r\n              }\r\n              edge={<Edge \r\n                      style={{ stroke: 'black', strokeWidth: 2 }}\r\n                      label={<TreeLabel node={false}/>}\r\n                    />}\r\n          />\r\n          {/* NODE LABEL:            label={<Label style={{ fill: 'black', fontWeight: \"900\"}}>*/ }\r\n        </div> \r\n      </div>: <Loader active inline='centered'> Constructing tree </Loader>\r\n    )\r\n}\r\n\r\n//forwardRef necessary so that methods can be invoked and state variables be accessed\r\nexport default forwardRef(TreeRender);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return /*#__PURE__*/React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && /*#__PURE__*/React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, /*#__PURE__*/React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && /*#__PURE__*/React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided into individual cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"],"names":["props","navigate","useNavigate","useState","successPath","openModal","messageType","message","modalState","setModalState","modalCloseHandler","ev","atts","modalInfo","useEffect","centered","closeIcon","open","onClose","color","onClick","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","plotPath","adaptedFontSizes","setAdaptedFontSizes","adaptedFontSizesRef","useRef","current","chartPDFGen","setChartPDFGen","chartRef","dataSetMetric","type","borderColor","backgroundColor","order","pointStyle","radius","hoverRadius","parsing","xAxisKey","yAxisKey","dataSetPlans","label","datasets","plotData","setPlotData","animation","duration","hover","animationDuration","responsiveAnimationDuration","maintainAspectRatio","responsive","plugins","legend","position","labels","usePointStyle","reverse","tooltip","callbacks","tooltipItem","datasetIndex","raw","planId","Math","round","value","scales","x","time","displayFormats","second","minute","hour","day","week","month","quarter","year","minUnit","tooltipFormat","title","display","text","font","family","weight","ticks","autoSkip","min","startDate","max","endDate","y","beginAtZero","ylabel","maxTicksLimit","onResize","currLocation","window","location","href","split","length","plotOptions","setPlotOptions","datasetsTemp","push","data","undefined","plansData","prevState","newState","JSON","parse","stringify","myplugins","beforeDraw","c","chartHeight","height","ticksFontSize","axisLabelFontSize","legendFontSize","newOptions","size","active","inline","floated","loading","imgFile","toBase64Image","doc","jsPDF","width","addImage","save","name","style","ref","console","log","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","options","uniqueId","map","headerName","returnTableHeader","tableHeaders","formErrorDisplay","setFormErrorDisplay","serverResponseMessage","setServerResponseMessage","useLocation","metricsTreeRef","loadingSimulationData","setLoadingSimulationData","metricsList","setMetricsList","originalPreferences","setOriginalPreferences","simulationPreferences","setSimulationPreferences","getMetricsList","metric","listOfMetrics","listOfMetricsIds","weightInputChangeHandler","newSimulationPreferences","updateWeightsHandler","validWeightsSum","parentMetric","childMetrics","sum","child","parseFloat","metricId","preventDefault","valid","Object","values","metricWeight","ValidInputs","validFloatBetweenZeroAndOne","metricToSimulate","requestBody","resourceId","preferences","parseInt","valueOf","Date","ApiModule","getSimulationData","resData","newPlotData","originalPreferencesTemp","simulationPreferencesTemp","forEach","item","find","preference","section","horizontal","as","textAlign","ribbon","stackable","columns","widths","metricName","toLocaleString","configurationProfile","grouped","marginLeft","marginRight","compact","collapsing","celled","selectable","metricid","onChange","required","defaultValue","error","content","pointing","generateCustomTableRow","generateCustomTableBody","circular","validIntGreaterThanZero","RegExp","test","validIntGreaterOrEqualThanZero","validStringOrDropDownSelection","validFloat","validDropDownMultipleSelection","validTimeStamp","dateAndTime","dateSplited","timeSplited","isLeapYear","apiURL","getMetrics","queryParams","axios","params","then","res","catch","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","toString","extraLabelForNodes","setExtraLabelForNodes","node","labelsText","extraLabelForNodesTemp","weightLabel","transform","fill","stroke","strokeWidth","r","textAnchor","dominantBaseline","cx","cy","TreeRender","nodes","setNodes","edges","setEdges","treeReady","setTreeReady","canvasRef","canvasDivRef","nodesaux","edgesaux","processData","parent","nodeToAdd","edgeToAdd","from","to","rootNode","addEventListener","mouseWheelHandler","passive","zoomIn","zoomOut","event","ctrlKey","wheelDelta","metricIdToUpdateWeight","weightToApply","newEdges","foundEdge","edgeInfo","endsWith","fitCanvas","newNodes","nodeRef","useImperativeHandle","marginBottom","align","Button","icon","Icon","Canvas","disabled","arrow","readonly","animated","direction","fit","minZoom","zoomable","Node","edge","Edge","Loader","forwardRef","TableBody","children","className","classes","rest","getUnhandledProps","ElementType","getElementType","React","_extends","handledProps","defaultProps","propTypes","TableCell","negative","positive","singleLine","verticalAlign","warning","useKeyOnly","useTextAlignProp","useVerticalAlignProp","useWidthProp","childrenUtils","create","createShorthandFactory","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","useValueAndKey","TableRow","cellAs","cells","_map","cell","Table","attached","basic","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","sortable","striped","structured","tableData","unstackable","useKeyOrValueAndKey","headerShorthandOptions","headerElement","index","Body","Cell","Footer","Header","HeaderCell","Row"],"sourceRoot":""}