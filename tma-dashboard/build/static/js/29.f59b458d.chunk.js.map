{"version":3,"file":"static/js/29.f59b458d.chunk.js","mappings":"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","sources":["components/tables/TableBody.js","components/tables/TableHeader.js","components/tables/TablePagination.js","pages/QualityModels/ViewQualityModelPage.js","utils/api/ApiModule.js","configurations/Configurations.js","utils/treeRendering/TreeLabel.js","utils/treeRendering/TreeRender.js"],"sourcesContent":["import {Table} from 'semantic-ui-react'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction TableBody(props){\r\n    //uniqueID is requested for Table items so that React can optimize rendering process \r\n    //It is used for the key property which must be set and be unique \r\n    let uniqueID = 0;\r\n    let navigate = useNavigate();\r\n    const tableRowBasePath = props[\"baserowpathlink\"];\r\n\r\n    function tableRowHandler(ev){\r\n        navigate(tableRowBasePath + \"/\" + ev.currentTarget.getAttribute(\"rowid\"),{state: {data: props[\"rowlinkdata\"]}})\r\n    }\r\n\r\n    //style={{cursor:\"pointer\"}} onClick={tableRowHandler}\r\n    function renderRow(rowItemData){\r\n        let tableHeaders = props[\"tableHeaders\"]\r\n        return (\r\n            <Table.Row  \r\n            {\r\n                ...tableRowBasePath !== undefined ? \r\n                {\r\n                    style: {cursor:\"pointer\"},\r\n                    onClick: tableRowHandler\r\n                } \r\n                : null\r\n            } \r\n            rowid={rowItemData[tableHeaders[0]]} \r\n            key={uniqueID++}>\r\n                {\r\n                    //for each row item, get the values for the header attributes respecting the table headers order\r\n                    tableHeaders.map(headerName => renderRowCell(headerName,rowItemData))\r\n                }\r\n            </Table.Row>\r\n        )\r\n    }\r\n\r\n    function renderRowCell(headerName,rowItemData){\r\n        return <Table.Cell key={uniqueID++}> {rowItemData[headerName]} </Table.Cell>\r\n    }\r\n\r\n    return(\r\n        <Table.Body>\r\n            {\r\n                //iterate over the result list to access each row item; props[\"data\"] => list of entities\r\n                props[\"data\"].map((rowItemData) => renderRow(rowItemData))\r\n            }\r\n        </Table.Body>\r\n    )\r\n}\r\n\r\nexport default TableBody","import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import {Icon, Menu, Table} from 'semantic-ui-react'\r\nimport {useState} from \"react\"\r\n\r\nfunction TablePagination(props){\r\n    const [paginationItems, setPaginationItems] = useState([1,2,3]);\r\n    const [currIndex,setCurrIndex] = useState(0);\r\n    \r\n    function paginationPageHandler(ev, atts){\r\n        setCurrIndex(atts[\"index\"])\r\n    }\r\n\r\n    function goBackPaginationHandler(ev, atts){\r\n        if(currIndex === 0){\r\n            let paginationItemsCopy = [...paginationItems];\r\n            for (let i =0; i< paginationItems.length; i++){\r\n                paginationItemsCopy[i] = paginationItemsCopy[i] - 1\r\n            }\r\n            setPaginationItems(paginationItemsCopy)\r\n        }\r\n        else{\r\n            setCurrIndex(currIndex - 1)\r\n        }\r\n    }\r\n\r\n    function goForwardPaginationHandler(ev, atts){\r\n        if(currIndex === 2){\r\n            let paginationItemsCopy = [...paginationItems];\r\n            for (let i =0; i< paginationItems.length; i++){\r\n                paginationItemsCopy[i] = paginationItemsCopy[i] + 1\r\n            }\r\n            setPaginationItems(paginationItemsCopy)\r\n        }\r\n        else{\r\n            setCurrIndex(currIndex + 1)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <Table.Footer>\r\n            <Table.Row>\r\n                <Table.HeaderCell colSpan={props[\"numberOfColumns\"]}>\r\n                    <Menu pointing secondary compact stackable>\r\n                        <Menu.Item \r\n                            as={(currIndex === 0 && paginationItems[0] === 1) ? \"div\" : \"a\" }\r\n                            disabled = {currIndex === 0 && paginationItems[0] === 1 } icon onClick={goBackPaginationHandler}>\r\n                            <Icon name='chevron left' />\r\n                        </Menu.Item>\r\n                        \r\n                        <Menu.Item as='a' index = {0} active={ 0 === currIndex } onClick={paginationPageHandler}>\r\n                            {paginationItems[0]}\r\n                        </Menu.Item>\r\n                        \r\n                        <Menu.Item as='a' index = {1} active={ 1 === currIndex } onClick={paginationPageHandler}> \r\n                            {paginationItems[1]}\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a' index = {2} active={ 2 === currIndex } onClick={paginationPageHandler}> \r\n                            {paginationItems[2]}\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a' icon onClick={goForwardPaginationHandler}>\r\n                            <Icon name='chevron right' />\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Table.HeaderCell>\r\n            </Table.Row>\r\n        </Table.Footer>\r\n    )\r\n}\r\n\r\nexport default TablePagination;","import { Loader, Divider, Container, Header, Grid, Segment, Form,Table, Button} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport {useState, useEffect} from \"react\"\r\nimport {useParams, useNavigate} from \"react-router-dom\"\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\nimport TableBody from \"../../components/tables/TableBody\"\r\nimport TablePagination from '../../components/tables/TablePagination'\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\n\r\nfunction ViewQualityModelPage(){\r\n    const tableHeaders = [\"Id\",\"Name\"]\r\n    const tableBoodyJSONProps = [\"configurationProfileId\",\"profileName\"]\r\n    \r\n    const [apiData, setAPIData] = useState(null);\r\n    const qualityModelId = useParams()[\"id\"];\r\n\r\n    let navigate = useNavigate();\r\n\r\n    function makeAPIRequest(){\r\n        ApiModule().getQualityModelById(qualityModelId, setAPIData)\r\n    }\r\n    \r\n    //Execute upon component rendering\r\n    useEffect(() => {\r\n        //perform API request\r\n        makeAPIRequest()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[]);\r\n    \r\n    function addProfileButtonHandler(){\r\n        console.log(apiData)\r\n        navigate(\"/createConfigurationProfile\",{state: {qm: apiData}})\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\"> Quality Model Details</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            {\r\n                //if apiData is null, then it is because the response from the API hasn't arrived\r\n                apiData === null ? <Loader active inline='centered'> Retrieving content</Loader> :\r\n                <Container>\r\n                    <Grid stackable columns={2}>\r\n                        <Grid.Row>\r\n                            <Grid.Column width=\"16\">\r\n\r\n                                <Segment>\r\n                                    <Form widths=\"equal\">\r\n                                        <Form.Group>\r\n                                            <Form.Field>\r\n                                                <label>Id:</label>\r\n                                                {apiData[\"qualityModelId\"]}\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Name:</label>\r\n                                                {apiData[\"modelName\"]}\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Description Reference:</label>\r\n                                                {apiData[\"modelDescriptionReference\"]}\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Business Threshold:</label>\r\n                                                {apiData[\"businessThreshold\"]}\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Metric Id:</label>\r\n                                                {apiData[\"metric\"][\"metricId\"]}\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <label>Metric Name:</label>\r\n                                                {apiData[\"metric\"][\"metricName\"]}\r\n                                            </Form.Field>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row>\r\n                            <Grid.Column>\r\n                                <Segment>\r\n                                    <Header as=\"h4\" textAlign=\"center\"> Metrics tree</Header>\r\n                                    <Divider/>\r\n                                    <TreeRender width={\"100%\"} height={\"50vh\"} data={apiData[\"metric\"]}/>\r\n                                </Segment>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <Segment >\r\n                                    <Grid columns={1}>\r\n                                        <Grid.Column>\r\n                                    <Header as=\"h4\" textAlign=\"center\"> Configuration Profiles associated</Header>\r\n                                    <Divider/>\r\n                                    <p align=\"right\">\r\n                                        <Button color='blue' onClick={addProfileButtonHandler}>Add Profile</Button>\r\n                                    </p>\r\n                                    <Table style = {{marginLeft: \"auto\", marginRight: \"auto\"}} \r\n                                        textAlign=\"center\"    \r\n                                        celled \r\n                                        selectable\r\n                                        compact\r\n                                    > \r\n                                        <TableHeader tableHeaders = {tableHeaders} ></TableHeader>\r\n                                        <TableBody \r\n                                            rowlinkdata={apiData}\r\n                                            baserowpathlink={\"/getConfigurationProfile\"} \r\n                                            data={apiData[\"configurationProfiles\"]} \r\n                                            tableHeaders = {tableBoodyJSONProps}\r\n                                        />\r\n                                        <TablePagination numberOfColumns={tableHeaders.length}/>\r\n                                    </Table>\r\n                                    </Grid.Column>  \r\n                                    </Grid> \r\n                                </Segment>\r\n                            </Grid.Column> \r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Container>\r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewQualityModelPage;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    //const API_IP_ADDRESS = \"10.3.3.119\"\r\n    const API_IP_ADDRESS = \"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction TreeLabel(props){\r\n    const [extraLabelForNodes, setExtraLabelForNodes] = useState(\r\n            {\r\n                text: (props[\"text\"].toString().split(\"\\n\")[0])\r\n            }\r\n        )\r\n\r\n    useEffect(()=>{\r\n        //if this is a node's label, it might be needed to add an extra label to represent weights. Thereby, check if this is\r\n        // a node's label and then split received text by \"\\n\". If the size is > 1, it means it has an extra label to render.\r\n        //Then, save both texts, the original and the extra label. In the return statement add extra label if its set on the \r\n        //state variable\r\n        if(props.node === true){\r\n            let labelsText = props.text.split(\"\\n\")\r\n            let extraLabelForNodesTemp = JSON.parse(JSON.stringify(extraLabelForNodes))\r\n            extraLabelForNodesTemp.text = labelsText[0]\r\n            if(labelsText.length > 1){\r\n                extraLabelForNodesTemp.weightLabel = labelsText[1]\r\n            }\r\n            setExtraLabelForNodes(extraLabelForNodesTemp)\r\n        }    \r\n    },[props.text])\r\n    \r\n    //Default customization of <Canvas> tag from reaflow library generated graphically bad labels. The examples were followed and\r\n    //used for edge property => <Edge \r\n    //                    style={{ stroke: 'black', strokeWidth: 2 }}\r\n    //                    label={<Label style={{ fill: 'red', fontWeight: \"900\"}} />}\r\n    //                  />}\r\n    //Thereby html tags generated with the default configs were analyzed, and found out the node graphs were being \r\n    //generated with SVG. \r\n    //Next, props being passed to the label were analyzed to understand the way the library renders the graph. Found \r\n    //out 'transform=\"translate(x,y)\" was used to position the labels.\r\n    //All the information passed to the label is retrieved from the props, which are the 'x' and 'y' assigned positions \r\n    //for the label inside the canvas, and the 'text' which the label presents on the screen.\r\n    //Finally, used svg elements to customize the labels in a own way. \r\n    return props[\"node\"] === false ?\r\n        <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n            <circle fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" /> \r\n            <text textAnchor=\"middle\" dominantBaseline = \"middle\" fill=\"black\">{props.text}</text>   \r\n        </g>\r\n        : \r\n        (\r\n            <React.Fragment>\r\n                <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                    <text fill=\"black\">{extraLabelForNodes.text}</text>   \r\n                </g>\r\n                {\r\n                    extraLabelForNodes.weightLabel !== undefined && extraLabelForNodes.weightLabel !== \"\" ?\r\n                    <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                        <circle cx= {props.x + props.width} cy={props.y + 6*props.height} fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" />\r\n                        <text \r\n                            textAnchor=\"middle\"\r\n                            dominantBaseline = \"middle\"\r\n                            x={props.x + props.width} \r\n                            y={props.y + 6*props.height} \r\n                            fill=\"black\">\r\n                                {extraLabelForNodes.weightLabel}\r\n                        </text>      \r\n                    </g>\r\n                    :null\r\n                }               \r\n            </React.Fragment>\r\n        ) \r\n}\r\n\r\nexport default TreeLabel;","import { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Canvas, Edge, Node, Label } from 'reaflow';\r\nimport {Loader, Button, Icon} from \"semantic-ui-react\"\r\nimport TreeLabel from \"./TreeLabel\"\r\n\r\n\r\nfunction TreeRender (props,ref) {\r\n    const data = props[\"data\"];\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [treeReady,setTreeReady] = useState(false);\r\n    const canvasRef = useRef();\r\n    const canvasDivRef = useRef();\r\n\r\n    //If it is to render a configuration profile, show the weights\r\n    const configurationProfile = props[\"configurationProfile\"];\r\n    const preferences = props[\"preferences\"];\r\n    \r\n    //Use of auxiliar variables to hold nodes and edges information while that information is being retrieved\r\n    //Later, once all the information is retrieved, use state variables \"edges\" and \"nodes\" to render \r\n    var nodesaux = [];\r\n    var edgesaux = [];\r\n    \r\n    //function that allows formating received data into the format requested by reaflow (tree rendering library)\r\n    function processData(parent){\r\n\r\n      //add current node (which is the parent) to list of nodes\r\n      let nodeToAdd = {\r\n        id: parent[\"metricId\"].toString(),\r\n        text: parent[\"metricName\"]\r\n      }\r\n      nodesaux.push(nodeToAdd);\r\n\r\n      //iterate over each child of parent node, add edge information and recursively call this function \"processData\"\r\n      //for each child to repeat the process\r\n      for(let child of parent[\"childMetrics\"]){\r\n        let edgeToAdd = {\r\n          id: parent[\"metricId\"].toString() + child[\"metricId\"].toString(),\r\n          from: child[\"metricId\"].toString(),\r\n          to: parent[\"metricId\"].toString(),\r\n        }\r\n        if(configurationProfile){\r\n          edgeToAdd.text = preferences.find(preference => preference.metricId === child.metricId).weight;\r\n        }\r\n        edgesaux.push(edgeToAdd)\r\n        processData(child)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //Once the component is rendered, deal with the transformation of the format of the data received from the API \r\n        //into the format needed by the tree library \r\n        processData(data)\r\n        if(configurationProfile){\r\n          let rootNode = nodesaux.find(node => parseInt(node.id) === data.metricId)\r\n          rootNode.text = rootNode.text.split(\"\\n\")[0] + \"\\n\" + \r\n            preferences.find(preference => preference.metricId === parseInt(rootNode.id)).weight;\r\n        }\r\n        //use state to set and render processed nodes and edges information  \r\n        setNodes(nodesaux)\r\n        setEdges(edgesaux)\r\n        setTreeReady(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data]);\r\n\r\n    useEffect(() => {\r\n      //if the Tree has been rendered, the div is no longer undefined and thereby wheel event can be added\r\n      // to later allow CRTL + MOUSEWHEEl to zoom in/out on the canvas, if buttons aren't wished to be used\r\n      if(canvasDivRef.current !== undefined){\r\n        canvasDivRef.current.addEventListener('wheel', mouseWheelHandler,{passive:false});\r\n      }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[treeReady]);\r\n    \r\n    const zoomIn = () => {\r\n      canvasRef.current.zoomIn()\r\n    }\r\n\r\n    const zoomOut = () => {\r\n      canvasRef.current.zoomOut()\r\n    }\r\n\r\n    const fitCanvas = () => {\r\n      canvasRef.current.fitCanvas()\r\n    }\r\n\r\n    function mouseWheelHandler(event){\r\n      if(event.ctrlKey === true){\r\n        event.preventDefault();\r\n        //Wheel down\r\n        if(event.wheelDelta < 0) {\r\n            zoomOut()\r\n        }\r\n        //Wheel up\r\n        else {\r\n          zoomIn()\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWeightsHandler(metricIdToUpdateWeight,weightToApply){\r\n      let newEdges = JSON.parse(JSON.stringify(edges))\r\n      let foundEdge = false\r\n      for(let edgeInfo of newEdges){\r\n        if(edgeInfo.id.endsWith(metricIdToUpdateWeight)){\r\n          foundEdge = true\r\n          edgeInfo.text = weightToApply\r\n          setEdges(newEdges)\r\n          fitCanvas()\r\n          break;\r\n        }\r\n      }\r\n      //didn't found Edge, which means the weight its being applied on the root node. Thereby, add an extra label to\r\n      //show the node's weight assigned\r\n      if(!foundEdge){\r\n        //copy state variable and find the node to which the extra label will be added\r\n        let newNodes = JSON.parse(JSON.stringify(nodes))\r\n        let nodeRef = newNodes.find(node => parseInt(node.id) === metricIdToUpdateWeight)\r\n        //after finding the node split its display text by '\\n' and take the 1st word which is the original text. Then, add the\r\n        //text of the weight to show on the extra label. This split by '\\n' is needed as multiple changes would add multiple\r\n        //'\\n' to the text and that would render multiple extra labels\r\n        nodeRef.text = nodeRef.text.split(\"\\n\")[0] + \"\\n\" + weightToApply\r\n        setNodes(newNodes)\r\n      }\r\n    }\r\n\r\n    //Needed to expose tree update functions to outside components\r\n    useImperativeHandle(ref, () => ({\r\n      updateWeightsHandler\r\n    }));\r\n\r\n    //Followed the demos and docs of reaflow libray at https://reaflow.dev/?path=/story/docs-getting-started-components--page\r\n    return (\r\n      treeReady === true ?\r\n      <div>\r\n        <div>\r\n          <p style={{marginBottom:\"5px\"}} align=\"right\">\r\n            <Button icon color='blue' onClick={zoomIn}> \r\n              <Icon name='zoom-in'/>\r\n            </Button>\r\n            <Button icon color='blue' onClick={zoomOut}> \r\n              <Icon name='zoom-out'/>\r\n            </Button>\r\n          </p>\r\n        </div>  \r\n        <div ref={canvasDivRef}>\r\n          <Canvas\r\n              disabled={true}\r\n              arrow={null}\r\n              height={ props[\"height\"]}\r\n              width={ props[\"width\"]}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              readonly = {true}\r\n              animated = {false}\r\n              direction= \"UP\"\r\n              ref= {canvasRef}\r\n              fit = {true}\r\n              minZoom = {-0.9}\r\n              zoomable = {false}\r\n              node={\r\n                <Node\r\n                  style={{ stroke: 'black', fill: '#ffe6cc', strokeWidth: 3}}\r\n                  label={<TreeLabel node={true}/>}\r\n                />\r\n              }\r\n              edge={<Edge \r\n                      style={{ stroke: 'black', strokeWidth: 2 }}\r\n                      label={<TreeLabel node={false}/>}\r\n                    />}\r\n          />\r\n          {/* NODE LABEL:            label={<Label style={{ fill: 'black', fontWeight: \"900\"}}>*/ }\r\n        </div> \r\n      </div>: <Loader active inline='centered'> Constructing tree </Loader>\r\n    )\r\n}\r\n\r\n//forwardRef necessary so that methods can be invoked and state variables be accessed\r\nexport default forwardRef(TreeRender);"],"names":["props","uniqueID","navigate","useNavigate","tableRowBasePath","tableRowHandler","ev","currentTarget","getAttribute","state","data","renderRow","rowItemData","tableHeaders","undefined","style","cursor","onClick","rowid","key","map","headerName","renderRowCell","uniqueId","returnTableHeader","useState","paginationItems","setPaginationItems","currIndex","setCurrIndex","paginationPageHandler","atts","colSpan","pointing","secondary","compact","stackable","as","disabled","icon","paginationItemsCopy","i","length","name","index","active","apiData","setAPIData","qualityModelId","useParams","useEffect","ApiModule","getQualityModelById","centered","width","section","horizontal","textAlign","inline","columns","widths","height","align","color","console","log","qm","marginLeft","marginRight","celled","selectable","rowlinkdata","baserowpathlink","numberOfColumns","apiURL","getMetrics","queryParams","axios","params","then","res","catch","error","message","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","text","toString","split","extraLabelForNodes","setExtraLabelForNodes","node","labelsText","extraLabelForNodesTemp","JSON","parse","stringify","weightLabel","transform","x","y","fill","stroke","strokeWidth","r","textAnchor","dominantBaseline","cx","cy","TreeRender","ref","nodes","setNodes","edges","setEdges","treeReady","setTreeReady","canvasRef","useRef","canvasDivRef","configurationProfile","preferences","nodesaux","edgesaux","processData","parent","nodeToAdd","push","child","edgeToAdd","from","to","find","preference","metricId","weight","rootNode","parseInt","current","addEventListener","mouseWheelHandler","passive","zoomIn","zoomOut","event","ctrlKey","preventDefault","wheelDelta","updateWeightsHandler","metricIdToUpdateWeight","weightToApply","newEdges","foundEdge","edgeInfo","endsWith","fitCanvas","newNodes","nodeRef","useImperativeHandle","marginBottom","Button","Icon","Canvas","arrow","readonly","animated","direction","fit","minZoom","zoomable","Node","label","edge","Edge","Loader","forwardRef"],"sourceRoot":""}